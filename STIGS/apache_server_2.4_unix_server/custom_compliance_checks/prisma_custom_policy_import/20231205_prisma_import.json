[
    {
        "modified": "2023-12-05T21:36:54.576106+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214228",
        "previousName": "",
        "_id": 9000,
        "title": "Apache web server management includes the ability to control the number of users and user sessions that utilize an Apache web server. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to several types of denial-of-service (DOS) attacks.\n\nAlthough there is some latitude concerning the settings, they should follow DoD-recommended values and be configurable to allow for future DoD direction. While the DoD will specify recommended values, the values can be adjusted to accommodate the operational requirements of a given system.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214228\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Full path to the httpd.conf file\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if KeepAlive is set to off or does not exist\nif ! grep -iq \"KeepAlive On\" \"$HTTPD_CONF\"; then\n    echo \"KeepAlive is set to off or does not exist\"\n    exit 1\nfi\n\n# Check if MaxKeepAliveRequests is set to a value less than 100 or does not exist\nif ! awk -F' ' '/MaxKeepAliveRequests/ {if ($2 < 100) exit 1}' \"$HTTPD_CONF\"; then\n    echo \"MaxKeepAliveRequests is set to a value less than 100 or does not exist\"\n    exit 1\nfi\n\n# If we've made it here, both checks have passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:04.644256+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214229",
        "previousName": "",
        "_id": 9001,
        "title": "Session management is the practice of protecting the bulk of the user authorization and identity information. This data can be stored on the client system or on the server.\n\nWhen the session information is stored on the client, the session ID, along with the user authorization and identity information, is sent along with each client request and is stored in a cookie, embedded in the uniform resource locator (URL), or placed in a hidden field on the displayed form. Each of these offers advantages and disadvantages. The biggest disadvantage to all three is the possibility of the hijacking of a session along with all of the user's credentials.\n\nWhen the user authorization and identity information is stored on the server in a protected and encrypted database, the communication between the client and Apache web server will only send the session identifier, and the server can then retrieve user credentials for the session when needed. If, during transmission, the session were to be hijacked, the user's credentials would not be compromised.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214229\n# Severity: medium\n\n# Check if the required modules are enabled\nmodules=$(httpd -M | grep -E 'session_module|usertrack')\n\nif [[ $modules == *\"usertrack_module (shared)\"* ]] && [[ $modules == *\"session_module (shared)\"* ]]; then\n    exit 0\nelse\n    # If the modules are not enabled, check the httpd.conf file\n    httpd_root=$(apachectl -V | grep -i 'httpd_root' | cut -d'\"' -f2)\n    server_config_file=$(apachectl -V | grep -i 'server_config_file' | cut -d'\"' -f2)\n    httpd_conf=\"${httpd_root}/${server_config_file}\"\n\n    session_module=$(cat $httpd_conf | grep -i \"session_module\")\n    usertrack_module=$(cat $httpd_conf | grep -i \"usertrack_module\")\n\n    if [[ -z $session_module ]] || [[ -z $usertrack_module ]]; then\n        # If the directives are not present in the httpd.conf file, exit with 1\n        exit 1\n    else\n        exit 0\n    fi\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:15.706072+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214230",
        "previousName": "",
        "_id": 9002,
        "title": "Data exchanged between the user and the Apache web server can range from static display data to credentials used to log on to the hosted application. Even when data appears to be static, the non-displayed logic in a web page may expose business logic or trusted system relationships. The integrity of all the data being exchanged between the user and the Apache web server must always be trusted. To protect the integrity and trust, encryption methods should be used to protect the complete communication session.\n\nSatisfies: SRG-APP-000014-WSR-000006, SRG-APP-000015-WSR-000014, SRG-APP-000033-WSR-000169, SRG-APP-000172-WSR-000104, SRG-APP-000179-WSR-000110, SRG-APP-000179-WSR-000111, SRG-APP-000224-WSR-000139, SRG-APP-000427-WSR-000186, SRG-APP-000439-WSR-000151, SRG-APP-000439-WSR-000152, SRG-APP-000439-WSR-000153, SRG-APP-000442-WSR-000182",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214230\n# Severity: medium\n\n# Check if ssl_module is loaded\nssl_module_check=$(httpd -M | grep -i ssl_module)\nif [[ -z \"$ssl_module_check\" ]]; then\n  echo \"ssl_module not found\"\n  exit 1\nfi\n\n# Determine the location of the HTTPD_ROOT directory and the httpd.conf file\nhttpd_root=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nserver_config_file=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Check if SSLProtocol directive is present and correctly configured\nssl_protocol_check=$(cat $httpd_root/$server_config_file | grep -i \"SSLProtocol\")\nif [[ -z \"$ssl_protocol_check\" ]] || [[ \"$ssl_protocol_check\" != \"SSLProtocol -ALL +TLSv1.2\" ]]; then\n  echo \"SSLProtocol directive is missing or not correctly configured\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:23.594508+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214231",
        "previousName": "",
        "_id": 9003,
        "title": "The server error logs are invaluable because they can also be used to identify potential problems and enable proactive remediation. Log data can reveal anomalous behavior such as \u201cnot found\u201d or \u201cunauthorized\u201d errors that may be an evidence of attack attempts. Failure to enable error logging can significantly reduce the ability of Web Administrators to detect or remediate problems. The CustomLog directive specifies the log file, syslog facility, or piped logging utility.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214231\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nhttpd_root=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nserver_config_file=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Full path to httpd.conf\nhttpd_conf=\"${httpd_root}/${server_config_file}\"\n\n# Check if \"CustomLog\" directive exists in the \"httpd.conf\" file\nif grep -iq \"CustomLog\" \"$httpd_conf\"; then\n    echo 'CustomLog directive exists'\n    exit 0\nelse\n    echo 'CustomLog directive missing'\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:33.161253+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214232",
        "previousName": "",
        "_id": 9004,
        "title": "Log records can be generated from various components within the Apache web server (e.g., httpd, plug-ins to external backends, etc.). From a web server perspective, certain specific Apache web server functionalities may be logged as well. The Apache web server must allow the definition of what events are to be logged. As conditions change, the number and types of events to be logged may change, and the Apache web server must be able to facilitate these changes.\n\nThe minimum list of logged events should be those pertaining to system startup and shutdown, system access, and system authentication events. If these events are not logged at a minimum, any type of forensic investigation would be missing pertinent information needed to replay what occurred.\n\n\nSatisfies: SRG-APP-000089-WSR-000047, SRG-APP-000092-WSR-000055, SRG-APP-000095-WSR-000056, SRG-APP-000096-WSR-000057, SRG-APP-000097-WSR-000058, SRG-APP-000098-WSR-000059, SRG-APP-000099-WSR-000061, SRG-APP-000100-WSR-000064",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214232\n# Severity: medium\n\n# Check if log_config_module is enabled\nif ! httpd -M | grep -iq \"log_config_module\"; then\n    echo \"log_config_module is not enabled\"\n    exit 1\nfi\n\n# Determine the location of the HTTPD_ROOT directory and the httpd.conf file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Check if LogFormat directive is present in the httpd.conf file\nif ! cat ${HTTPD_ROOT}/${SERVER_CONFIG_FILE} | grep -iq \"LogFormat\"; then\n    echo \"LogFormat directive is missing in httpd.conf\"\n    exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:52.391834+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214233",
        "previousName": "",
        "_id": 9005,
        "title": "Apache web server logging capability is critical for accurate forensic analysis. Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct source of the events (e.g., source IP) is important during forensic analysis. Correctly determining the source of events will add information to the overall reconstruction of the loggable event. By determining the source of the event correctly, analysis of the enterprise can be undertaken to determine if events tied to the source occurred in other areas within the enterprise.\n\nA web server behind a load balancer or proxy server, when not configured correctly, will record the load balancer or proxy server as the source of every loggable event. When looking at the information forensically, this information is not helpful in the investigation of events. The web server must record with each event the client source of the event.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214233\n# Severity: medium\n\n# Check if Apache server is installed\nif ! command -v apachectl &> /dev/null\nthen\n    echo \"Apache server is not installed. Exiting with code 0.\"\n    exit 0\nfi\n\n# Get the HTTPD_ROOT and SERVER_CONFIG_FILE\nHTTPD_ROOT=$(apachectl -V | grep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | grep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Get the full path to the httpd.conf file\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if the httpd.conf file exists\nif [ ! -f \"$HTTPD_CONF\" ]\nthen\n    echo \"httpd.conf file does not exist. Exiting with code 1.\"\n    exit 1\nfi\n\n# Get the log file location\nLOG_FILE=$(grep \"CustomLog\" $HTTPD_CONF | awk '{print $2}' | tr -d '\"')\n\n# Check if the log file exists\nif [ ! -f \"$LOG_FILE\" ]\nthen\n    echo \"Log file does not exist. Exiting with code 1.\"\n    exit 1\nfi\n\n# Check if the log entries reflect the IP address of the proxy server as the source\nif grep -q \"proxy\" \"$LOG_FILE\"\nthen\n    echo \"Log entries reflect the IP address of the proxy server as the source. Exiting with code 1.\"\n    exit 1\nelse\n    echo \"Log entries do not reflect the IP address of the proxy server as the source. Exiting with code 0.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:37:57.333404+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214234",
        "previousName": "",
        "_id": 9006,
        "title": "Reviewing log data allows an investigator to recreate the path of an attacker and to capture forensic data for later use. Log data is also essential to SAs in their daily administrative duties on the hosted system or within the hosted applications.\n\nIf the logging system begins to fail, events will not be recorded. Organizations must define logging failure events, at which time the application or the logging mechanism the application uses will provide a warning to the ISSO and SA at a minimum.\n\nSatisfies: SRG-APP-000108-WSR-000166, SRG-APP-000359-WSR-000065",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214234\n# Severity: medium\n\necho \"Finding ID: V-214234\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Check Content: Work with the SIEM administrator to determine if an alert is configured when audit data is no longer received as expected.\"\necho \"If there is no alert configured, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:38:16.922646+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214235",
        "previousName": "",
        "_id": 9007,
        "title": "Log data is essential in the investigation of events. If log data were to become compromised, competent forensic analysis and discovery of the true source of potentially malicious system activity would be difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to their advantage since each event record might contain communication ports, protocols, services, trust relationships, user names, etc.\n\nThe web server must protect the log data from unauthorized read, write, copy, etc. This can be done by the web server if the web server is also doing the logging function. The web server may also use an external log system. In either case, the logs must be protected from access by non-privileged users.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214235\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Determine the location of the log files\nLOG_DIR=\"${HTTPD_ROOT}/logs\"\n\n# Check the permissions of the log files\nfor LOG_FILE in $(ls ${LOG_DIR}/*log*); do\n    PERMISSIONS=$(stat -c %a ${LOG_FILE})\n    OWNER=$(stat -c %U ${LOG_FILE})\n    GROUP=$(stat -c %G ${LOG_FILE})\n\n    # Check if the permissions are set to 640 or more restrictive\n    if [ ${PERMISSIONS} -gt 640 ]; then\n        echo \"Permissions for ${LOG_FILE} are not set to 640 or more restrictive\"\n        exit 1\n    fi\n\n    # Check if the owner and group are either root or apache\n    if [ ${OWNER} != \"root\" ] && [ ${OWNER} != \"apache\" ]; then\n        echo \"Owner of ${LOG_FILE} is not root or apache\"\n        exit 1\n    fi\n\n    if [ ${GROUP} != \"root\" ] && [ ${GROUP} != \"apache\" ]; then\n        echo \"Group of ${LOG_FILE} is not root or apache\"\n        exit 1\n    fi\ndone\n\n# If the script has not exited by now, the check has passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:38:26.335877+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214236",
        "previousName": "",
        "_id": 9008,
        "title": "Log data is essential in the investigation of events. If log data were to become compromised, competent forensic analysis and discovery of the true source of potentially malicious system activity would be difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to their advantage since each event record might contain communication ports, protocols, services, trust relationships, user names, etc.\n\nThe web server must protect the log data from unauthorized read, write, copy, etc. This can be done by the web server if the web server is also doing the logging function. The web server may also use an external log system. In either case, the logs must be protected from access by non-privileged users.\n\nSatisfies: SRG-APP-000119-WSR-000069, SRG-APP-000120-WSR-000070",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214236\n# Severity: medium\n\n# Check if the Apache server is installed\nif [ ! -x \"$(command -v apache2)\" ]; then\n  echo \"Apache server is not installed.\"\n  exit 1\nfi\n\n# Get the Apache server installation path\nINSTALL_PATH=$(dirname $(dirname $(which apache2)))\n\n# Check the ownership of the log files\nLOG_FILES_OWNER=$(ls -ld $INSTALL_PATH/logs | awk '{print $3}')\n\n# Replace 'admin' with the actual administrative service account\nif [ \"$LOG_FILES_OWNER\" != \"admin\" ]; then\n  echo \"The Apache server log files are not owned by the administrative service account.\"\n  exit 1\nelse\n  echo \"The Apache server log files are owned by the administrative service account.\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:38:35.863197+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214237",
        "previousName": "",
        "_id": 9009,
        "title": "Protection of log data includes ensuring log data is not accidentally lost or deleted. Backing up log records to an unrelated system or onto separate media than the system the web server is actually running on helps to ensure that, in the event of a catastrophic system failure, the log records will be retained.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214237\n# Severity: medium\n\necho \"Finding ID: V-214237\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Manual Check: Interview the Information System Security Officer, System Administrator, Web Manager, Webmaster, or developers as necessary to determine whether a tested and verifiable backup strategy has been implemented for web server software and all web server data files.\"\necho \"Proposed questions:\"\necho \"- Who maintains the backup and recovery procedures?\"\necho \"- Do you have a copy of the backup and recovery procedures?\"\necho \"- Where is the off-site backup location?\"\necho \"- Is the contingency plan documented?\"\necho \"- When was the last time the contingency plan was tested?\"\necho \"- Are the test dates and results documented?\"\necho \"If there is not a backup and recovery process for the web server, this is a finding.\"\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:38:44.354059+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214238",
        "previousName": "",
        "_id": 9010,
        "title": "In the case of a production web server, areas for content development and testing will not exist, as this type of content is only permissible on a development website. The process of developing on a functional production website entails a degree of trial and error and repeated testing. This process is often accomplished in an environment where debugging, sequencing, and formatting of content are the main goals. The opportunity for a malicious user to obtain files that reveal business logic and logon schemes is high in this situation. The existence of such immature content on a web server represents a significant security risk that is totally avoidable.\n\nThe web server must enforce, internally or through an external utility, the signing of modules before they are implemented into a production environment. By signing modules, the author guarantees that the module has been reviewed and tested before production implementation.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214238\n# Severity: medium\n\n# Check if httpd is installed\nif ! command -v httpd &> /dev/null\nthen\n    echo \"httpd could not be found\"\n    exit 1\nfi\n\n# Get the list of loaded modules\nmodules=$(httpd -M | awk '{print $1}' | sort)\n\n# List of basic modules that are needed for basic web function\nbasic_modules=(\"core_module\" \"http_module\" \"so_module\" \"mpm_prefork_module\")\n\n# Check each module\nfor module in $modules\ndo\n    if [[ ! \" ${basic_modules[@]} \" =~ \" ${module} \" ]]; then\n        echo \"Unnecessary module found: $module\"\n        exit 1\n    fi\ndone\n\n# If no unnecessary modules found\necho \"All modules are necessary for operation\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:38:55.688901+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214239",
        "previousName": "",
        "_id": 9011,
        "title": "User management and authentication can be an essential part of any application hosted by the web server. Along with authenticating users, the user management function must perform several other tasks such as password complexity, locking users after a configurable number of failed logons, and management of temporary and emergency accounts. All of this must be done enterprise-wide.\n\nThe web server contains a minimal user management function, but the web server user management function does not offer enterprise-wide user management, and user management is not the primary function of the web server. User management for the hosted applications should be done through a facility that is built for enterprise-wide user management, such as LDAP and Active Directory.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214239\n# Severity: medium\n\n# Check if Apache is installed\nif ! command -v apache2 &> /dev/null\nthen\n    echo \"Apache is not installed. Exiting with code 0.\"\n    exit 0\nfi\n\n# Get Apache config directory\napache_config_dir=$(apache2ctl -V | grep SERVER_CONFIG_FILE | cut -d '\"' -f 2 | xargs dirname)\n\n# Search for \"AuthUserFile\" in the configuration files\nauth_user_file_lines=$(grep -rin \"AuthUserFile\" $apache_config_dir)\n\nif [[ -z \"$auth_user_file_lines\" ]]\nthen\n    # No uncommented lines found pointing to files on disk using \"AuthUserFile\"\n    exit 0\nelse\n    # Uncommented lines found pointing to files on disk using \"AuthUserFile\"\n    echo \"Found uncommented AuthUserFile lines in Apache configuration files. Exiting with code 1.\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:39:04.837253+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214240",
        "previousName": "",
        "_id": 9012,
        "title": "A web server can provide many features, services, and processes. Some of these may be deemed unnecessary or too unsecure to run on a production DoD system.\n\nThe web server must provide the capability to disable, uninstall, or deactivate functionality and services that are deemed to be non-essential to the web server mission or can adversely impact server performance.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214240\n# Severity: medium\n\n# This script checks for unnecessary software installed on the server.\n# It should be run by the ISSO to verify compliance with the STIG.\n\n# List of allowed software\nallowed_software=(\"apache2\" \"mysql\" \"php\" \"ssh\" \"bash\" \"coreutils\" \"grep\" \"sed\" \"awk\")\n\n# Get list of installed software\ninstalled_software=$(dpkg --get-selections | awk '{print $1}')\n\n# Check each installed software\nfor software in $installed_software; do\n    if ! [[ \" ${allowed_software[@]} \" =~ \" ${software} \" ]]; then\n        echo \"Unnecessary software installed: $software\"\n        exit 1\n    fi\ndone\n\n# If we made it here, no unnecessary software was found\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:39:14.977256+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214241",
        "previousName": "",
        "_id": 9013,
        "title": "A web server should be primarily a web server or a proxy server but not both, for the same reasons that other multi-use servers are not recommended. Scanning for web servers that will also proxy requests into an otherwise protected network is a very common attack, making the attack anonymous.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214241\n# Severity: medium\n\n# Check if any of the proxy modules are present\nmodules=$(httpd -M | sort)\nfor module in proxy_module proxy_ajp_module proxy_balancer_module proxy_ftp_module proxy_http_module proxy_connect_module\ndo\n    if [[ $modules == *\"$module\"* ]]; then\n        echo \"Proxy module $module is present\"\n        exit 1\n    fi\ndone\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nhttpd_root=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nserver_config_file=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Check if ProxyRequest directive is set to \u201cOn\u201d\nif grep -q \"ProxyRequest On\" \"$httpd_root/$server_config_file\"; then\n    echo \"ProxyRequest directive is set to On\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:39:27.040144+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214242",
        "previousName": "",
        "_id": 9014,
        "title": "Apache web server documentation, sample code, example applications, and tutorials may be an exploitable threat to an Apache web server because this type of code has not been evaluated and approved. A production Apache web server must only contain components that are operationally necessary (e.g., compiled code, scripts, web content, etc.).\n\nAny documentation, sample code, example applications, and tutorials must be removed from a production Apache web server. To ensure that the documentation and code are not installed or are uninstalled completely, the Apache web server must offer an option as part of the installation process to exclude these packages or to uninstall the packages if necessary.\n\nSatisfies: SRG-APP-000141-WSR-000077, SRG-APP-000141-WSR-000080",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214242\n# Severity: high\n\n# Check for default index.html or welcome page\nif grep -r -E 'DirectoryIndex index.html|DirectoryIndex welcome.html' /etc/apache2/; then\n  echo 'Default index.html or welcome page is present'\n  exit 1\nfi\n\n# Check for Apache User Manual content\nif grep -r 'Alias /manual' /etc/apache2/; then\n  echo 'Apache User Manual content is installed'\n  exit 1\nfi\n\n# Check for Server Status handler\nif grep -r 'Location /server-status' /etc/apache2/; then\n  echo 'Server Status handler is configured'\n  exit 1\nfi\n\n# Check for Server Information handler\nif grep -r 'Location /server-info' /etc/apache2/; then\n  echo 'Server Information handler is configured'\n  exit 1\nfi\n\n# Check for other handler configurations\nif grep -r 'perl-status' /etc/apache2/; then\n  echo 'Other handler configurations are enabled'\n  exit 1\nfi\n\n# If none of the checks failed, exit with 0\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-05T21:39:40.562326+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214243",
        "previousName": "",
        "_id": 9015,
        "title": "Resource mapping is the process of tying a particular file type to a process in the web server that can serve that type of file to a requesting client and to identify which file types are not to be delivered to a client.\n\nBy not specifying which files can and cannot be served to a user, the web server could deliver to a user web server configuration files, log files, password files, etc.\n\nThe web server must only allow hosted application file types to be served to a user, and all other types must be disabled.\n\nSatisfies: SRG-APP-000141-WSR-000081, SRG-APP-000141-WSR-000083",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214243\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Full path to httpd.conf\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if \"Action\" or \"AddHandler\" exist and they configure .exe, .dll, .com, .bat, or .csh, or any other shell as a viewer for documents\nif grep -iE \"Action|AddHandler\" \"${HTTPD_CONF}\" | grep -iE \"\\.exe|\\.dll|\\.com|\\.bat|\\.csh\"; then\n    echo \"STIG Finding ID: V-214243. Action or AddHandler directives configure a shell as a viewer for documents.\"\n    exit 1\nelse\n    echo \"STIG Finding ID: V-214243. No Action or AddHandler directives configure a shell as a viewer for documents.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:39:49.629131+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214244",
        "previousName": "",
        "_id": 9016,
        "title": "Scripts allow server-side processing on behalf of the hosted application user or as processes needed in the implementation of hosted applications. Removing scripts not needed for application operation or deemed vulnerable helps to secure the web server.\n\nTo ensure scripts are not added to the web server and run maliciously, script mappings that are not needed or used by the web server for hosted application operation must be removed.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214244\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Locate \"cgi-bin\" files and directories enabled in the Apache configuration\nSCRIPTS=$(cat ${HTTPD_ROOT}/${SERVER_CONFIG_FILE} | grep -i \"Script\")\n\n# Check if any scripts are present that are not needed for application operation\nif [ -n \"$SCRIPTS\" ]; then\n    echo \"Unnecessary scripts found in Apache configuration\"\n    exit 1\nelse\n    echo \"No unnecessary scripts found in Apache configuration\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:39:57.059456+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214245",
        "previousName": "",
        "_id": 9017,
        "title": "A web server can be installed with functionality that, by its nature, is not secure. WebDAV is an extension to the HTTP protocol that, when developed, was meant to allow users to create, change, and move documents on a server, typically a web server or web share. Allowing this functionality, development, and deployment is much easier for web authors.\n\nWebDAV is not widely used and has serious security concerns because it may allow clients to modify unauthorized files on the web server.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214245\n# Severity: medium\n\n# Check if Apache is installed\nif ! command -v httpd &> /dev/null\nthen\n    echo \"Apache is not installed, exiting with 0\"\n    exit 0\nfi\n\n# Check for the presence of the modules\nmodules=(\"dav_module\" \"dav_fs_module\" \"dav_lock_module\")\nfor module in \"${modules[@]}\"\ndo\n    if httpd -M | sort | grep -q \"$module\"\n    then\n        echo \"Found forbidden module: $module\"\n        exit 1\n    fi\ndone\n\n# If none of the forbidden modules are found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:12.022760+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214246",
        "previousName": "",
        "_id": 9018,
        "title": "The web server must be configured to listen on a specified IP address and port. Without specifying an IP address and port for the web server to use, the web server will listen on all IP addresses available to the hosting server. If the web server has multiple IP addresses, i.e., a management IP address, the web server will also accept connections on the management IP address.\n\nAccessing the hosted application through an IP address normally used for non-application functions opens the possibility of user access to resources, utilities, files, ports, and protocols that are protected on the desired application IP address.\n\nSatisfies: SRG-APP-000142-WSR-000089, SRG-APP-000176-WSR-000096",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214246\n# Severity: medium\n\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\nif [ ! -f \"$HTTPD_CONF\" ]; then\n    echo \"httpd.conf file not found\"\n    exit 1\nfi\n\nLISTEN_DIRECTIVES=$(grep -i \"Listen\" \"$HTTPD_CONF\")\n\nif [ -z \"$LISTEN_DIRECTIVES\" ]; then\n    echo \"Listen directive does not exist\"\n    exit 1\nfi\n\nfor directive in $LISTEN_DIRECTIVES; do\n    IP_ADDRESS=$(echo \"$directive\" | cut -d':' -f1)\n    PORT_NUMBER=$(echo \"$directive\" | cut -d':' -f2)\n\n    if [ -z \"$IP_ADDRESS\" ] || [ -z \"$PORT_NUMBER\" ]; then\n        echo \"Listen directive with only an IP address or only a port number specified\"\n        exit 1\n    fi\n\n    if [ \"$IP_ADDRESS\" == \"0.0.0.0\" ] || [ \"$IP_ADDRESS\" == \"[::ffff:0.0.0.0]\" ]; then\n        echo \"Listen directive with IP address all zeros\"\n        exit 1\n    fi\ndone\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:18.204789+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214247",
        "previousName": "",
        "_id": 9019,
        "title": "As a rule, accounts on a web server are to be kept to a minimum. Only administrators, web managers, developers, auditors, and web authors require accounts on the machine hosting the web server. The resources to which these accounts have access must also be closely monitored and controlled. Only the system administrator needs access to all the system's capabilities, while the web administrator and associated staff require access and control of the web content and web server configuration files.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214247\n# Severity: medium\n\n# Get the apache user\napache_user=$(ps aux | grep '[a]pache' | awk '{print $1}' | uniq)\n\n# Check if there are any files or directories owned by the apache user\nowned_files=$(find / -user $apache_user 2>/dev/null)\n\nif [[ -z \"$owned_files\" ]]; then\n    echo \"No files or directories owned by Apache user\"\n    exit 0\nelse\n    echo \"Files or directories owned by Apache user found\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:24.621588+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214248",
        "previousName": "",
        "_id": 9020,
        "title": "By separating Apache web server security functions from non-privileged users, roles can be developed that can then be used to administer the Apache web server. Forcing users to change from a non-privileged account to a privileged account when operating on the Apache web server or on security-relevant information forces users to only operate as a Web Server Administrator when necessary. Operating in this manner allows for better logging of changes and better forensic information and limits accidental changes to the Apache web server.\n\nTo limit changes to the Apache web server and limit exposure to any adverse effects from the changes, files such as the Apache web server application files, libraries, and configuration files must have permissions and ownership set properly to only allow privileged users access.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214248\n# Severity: high\n\necho \"Finding ID: V-214248\"\necho \"This is a manual check that requires verification with the System Administrator (SA) or the Information System Security Officer (ISSO).\"\necho \"Check for any undocumented privileged accounts and access to shell scripts or operating system functions.\"\necho \"If any are found, this is a violation of the STIG.\"\n\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-05T21:40:29.728228+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214249",
        "previousName": "",
        "_id": 9021,
        "title": "The separation of user functionality from web server management can be accomplished by moving management functions to a separate IP address or port. To further separate the management functions, separate authentication methods and certificates should be used.\n\nBy moving the management functionality, the possibility of accidental discovery of the management functions by non-privileged users during hosted application use is minimized.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214249\n# Severity: medium\n\n# This script checks if the Apache server's hosted application functionality is separated from web server management functions.\n# As this is a manual check, the script will echo the Finding ID and a short explanation of the STIG.\n\necho \"Finding ID: V-214249\"\necho \"STIG: Review the Apache web server documentation and deployed configuration to determine whether hosted application functionality is separated from web server management functions.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:37.559927+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214250",
        "previousName": "",
        "_id": 9022,
        "title": "Captured sessions can be reused in \"replay\" attacks. This requirement limits the ability of adversaries from capturing and continuing to employ previously valid session IDs.\n\nSession IDs are tokens generated by web applications to uniquely identify an application user's session. Unique session IDs help to reduce predictability of said identifiers. When a user logs out, or when any other session termination event occurs, the web server must terminate the user session to minimize the potential for an attacker to hijack that particular user session.\n\nSatisfies: SRG-APP-000220-WSR-000201, SRG-APP-000295-WSR-000012",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214250\n# Severity: medium\n\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\nSESSION_MAX_AGE=$(cat ${HTTPD_CONF} | grep -i \"SessionMaxAge\" | awk '{print $2}')\n\nif [[ -z \"${SESSION_MAX_AGE}\" ]] || [[ \"${SESSION_MAX_AGE}\" -gt 600 ]]; then\n    echo 'SessionMaxAge is not set or is set to more than 600'\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:45.091882+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214251",
        "previousName": "",
        "_id": 9023,
        "title": "Cookies are used to exchange data between the web server and the client. Cookies, such as a session cookie, may contain session information and user credentials used to maintain a persistent connection between the user and the hosted application since HTTP/HTTPS is a stateless protocol.\n\nWhen the cookie parameters are not set properly (i.e., domain and path parameters), cookies can be shared within hosted applications residing on the same web server or to applications hosted on different web servers residing on the same domain.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214251\n# Severity: medium\n\n# Check if the headers_module (shared) is loaded in the web server\nMODULE_CHECK=$(httpd -M | grep \"headers_module (shared)\")\n\nif [[ -z \"$MODULE_CHECK\" ]]; then\n  echo \"headers_module (shared) is not loaded\"\n  exit 1\nfi\n\n# Check the SessionCookieName settings\nCOOKIE_SETTINGS=$(grep SessionCookieName /path/to/mod_session.conf)\n\nif [[ \"$COOKIE_SETTINGS\" == *\"HttpOnly\"* ]] && [[ \"$COOKIE_SETTINGS\" == *\"Secure\"* ]] && [[ \"$COOKIE_SETTINGS\" != *\"Domain\"* ]]; then\n  echo \"Cookie settings are correct\"\n  exit 0\nelse\n  echo \"Cookie settings are incorrect\"\n  exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:40:54.212700+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214252",
        "previousName": "",
        "_id": 9024,
        "title": "Generating a session identifier (ID) that is not easily guessed through brute force is essential to deter several types of session attacks. By knowing the session ID, an attacker can hijack a user session that has already been user authenticated by the hosted application. The attacker does not need to guess user identifiers and passwords or have a secure token since the user session has already been authenticated.\n\nGenerating session IDs that are at least 128 bits (16 bytes) in length will cause an attacker to take a large amount of time and resources to guess, reducing the likelihood of an attacker guessing a session ID.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214252\n# Severity: medium\n\n# Check if session_crypto is enabled\nif ! httpd -M | grep -q \"session_crypto_module\"; then\n  echo \"session_crypto_module is not enabled\"\n  exit 1\nfi\n\n# Determine the location of the HTTPD_ROOT directory and the httpd.conf file\nHTTPD_ROOT=$(apachectl -V | grep -i 'HTTPD_ROOT' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | grep -i 'SERVER_CONFIG_FILE' | cut -d'\"' -f2)\n\n# Full path to the httpd.conf file\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if SessionCryptoCipher is used and set to aes256\nif ! grep -q \"SessionCryptoCipher aes256\" \"$HTTPD_CONF\"; then\n  echo \"SessionCryptoCipher is not used or not set to aes256\"\n  exit 1\nfi\n\n# If we made it here, the check passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:41:03.626916+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214253",
        "previousName": "",
        "_id": 9025,
        "title": "Generating a session identifier (ID) that is not easily guessed through brute force is essential to deter several types of session attacks. By knowing the session ID, an attacker can hijack a user session that has already been user-authenticated by the hosted application. The attacker does not need to guess user identifiers and passwords or have a secure token since the user session has already been authenticated.\n\nBy generating session IDs that contain as much of the character set as possible, i.e., A-Z, a-z, and 0-9, the session ID becomes exponentially harder to guess.\n\nSatisfies: SRG-APP-000223-WSR-000145, SRG-APP-000224-WSR-000135, SRG-APP-000224-WSR-000136, SRG-APP-000224-WSR-000138",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214253\n# Severity: high\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Verify the \"unique_id_module\" is loaded\nUNIQUE_ID_MODULE=$(httpd -M | grep unique_id)\n\nif [[ -z \"$UNIQUE_ID_MODULE\" ]]; then\n    echo \"unique_id_module is not loaded\"\n    exit 1\nelse\n    echo \"unique_id_module is loaded\"\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-05T21:41:10.689031+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214254",
        "previousName": "",
        "_id": 9026,
        "title": "Determining a safe state for failure and weighing that against a potential denial of service for users depends on what type of application the web server is hosting. For an application presenting publicly available information that is not critical, a safe state for failure might be to shut down for any type of failure, but for an application that presents critical and timely information, a shutdown might not be the best state for all failures.\n\nPerforming a proper risk analysis of the hosted applications and configuring the web server according to what actions to take for each failure condition will provide a known fail safe state for the web server.\n\nSatisfies: SRG-APP-000225-WSR-000140, SRG-APP-000225-WSR-000074",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214254\n# Severity: medium\n\necho \"Finding ID: V-214254\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Check Content: Interview the System Administrator for the Apache 2.4 web server. Ask for documentation on the disaster recovery methods tested and planned for the Apache 2.4 web server in the event of the necessity for rollback. If documentation for a disaster recovery has not been established, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:41:21.137769+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214255",
        "previousName": "",
        "_id": 9027,
        "title": "A denial of service (DoS) can occur when the Apache web server is so overwhelmed that it can no longer respond to additional requests. A web server not properly tuned may become overwhelmed and cause a DoS condition even with expected traffic from users. To avoid a DoS, the Apache web server must be tuned to handle the expected traffic for the hosted applications.\n\nSatisfies: SRG-APP-000246-WSR-000149, SRG-APP-000435-WSR-000148",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214255\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Verify that the \"Timeout\" directive is specified to have a value of \"10\" seconds or less.\nTIMEOUT_VALUE=$(cat ${HTTPD_ROOT}/${SERVER_CONFIG_FILE} | grep -i \"Timeout\" | awk '{print $2}')\n\nif [[ -z \"${TIMEOUT_VALUE}\" || \"${TIMEOUT_VALUE}\" -gt 10 ]]; then\n    echo 'Timeout directive is not configured or is set for more than \"10\" seconds'\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:41:30.986826+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214256",
        "previousName": "",
        "_id": 9028,
        "title": "Information needed by an attacker to begin looking for possible vulnerabilities in a web server includes any information about the web server, backend systems being accessed, and plug-ins or modules being used.\n\nWeb servers will often display error messages to client users, displaying enough information to aid in the debugging of the error. The information given back in error messages may display the web server type, version, patches installed, plug-ins and modules installed, type of code being used by the hosted application, and any backends being used for data storage.\n\nThis information could be used by an attacker to blueprint what type of attacks might be successful. The information given to users must be minimized to not aid in the blueprinting of the Apache web server.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214256\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Construct the full path to the httpd.conf file\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if the \"ErrorDocument\" directive is being used for custom error pages for \"4xx\" or \"5xx\" HTTP status codes\nif grep -q -i \"ErrorDocument\" \"$HTTPD_CONF\"; then\n    exit 0\nelse\n    echo \"ErrorDocument directive not found in $HTTPD_CONF\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:41:43.766894+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214257",
        "previousName": "",
        "_id": 9029,
        "title": "Information needed by an attacker to begin looking for possible vulnerabilities in a web server includes any information about the web server and plug-ins or modules being used.\n\nWhen debugging or trace information is enabled in a production web server, information about the web server, such as web server type, version, patches installed, plug-ins and modules installed, type of code being used by the hosted application, and any backends being used for data storage may be displayed. Since this information may be placed in logs and general messages during normal operation of the web server, an attacker does not need to cause an error condition to gain this information.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214257\n# Severity: medium\n\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\nif [ -z \"$HTTPD_ROOT\" ] || [ -z \"$SERVER_CONFIG_FILE\" ]; then\n    echo \"Unable to determine HTTPD_ROOT or SERVER_CONFIG_FILE\"\n    exit 1\nfi\n\nHTTPD_CONF=\"$HTTPD_ROOT/$SERVER_CONFIG_FILE\"\n\nif [ ! -f \"$HTTPD_CONF\" ]; then\n    echo \"httpd.conf file not found\"\n    exit 1\nfi\n\nTRACE_ENABLE=$(grep -i \"TraceEnable\" \"$HTTPD_CONF\")\nLOG_LEVEL=$(grep -i \"LogLevel\" \"$HTTPD_CONF\")\n\nif [ -z \"$TRACE_ENABLE\" ] || [ \"$TRACE_ENABLE\" != \"Off\" ]; then\n    echo \"TraceEnable directive is not set to Off or does not exist\"\n    exit 1\nfi\n\nif [ -z \"$LOG_LEVEL\" ]; then\n    echo \"LogLevel directive is not being used\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:41:54.615676+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214258",
        "previousName": "",
        "_id": 9030,
        "title": "Leaving sessions open indefinitely is a major security risk. An attacker can easily use an already authenticated session to access the hosted application as the previously authenticated user. By closing sessions after a set period of inactivity, the Apache web server can make certain that those sessions that are not closed through the user logging out of an application are eventually closed. mod_reqtimeout is an Apache module designed to shut down connections from clients taking too long to send their request, as seen in many attacks. This module provides a directive that allows Apache to close the connection if it senses that the client is not sending data quickly enough.\n\nAcceptable values are 5 minutes for high-value applications, 10 minutes for medium-value applications, and 20 minutes for low-value applications.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214258\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Verify the \"reqtimeout_module\" is loaded\nMODULE_LOADED=$(httpd -M | grep reqtimeout_module)\n\nif [[ -z \"$MODULE_LOADED\" ]]; then\n  echo \"reqtimeout_module is not loaded\"\n  exit 1\nfi\n\n# Verify the \"RequestReadTimeout\" directive is configured\nREQUEST_READ_TIMEOUT=$(grep -i \"RequestReadTimeout\" $HTTPD_ROOT/$SERVER_CONFIG_FILE)\n\nif [[ -z \"$REQUEST_READ_TIMEOUT\" ]]; then\n  echo \"RequestReadTimeout directive is not configured\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:08.031123+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214259",
        "previousName": "",
        "_id": 9031,
        "title": "Remote access to the Apache web server is any access that communicates through an external, non-organization-controlled network. Remote access can be used to access hosted applications or to perform management functions.\n\nA web server can be accessed remotely and must be capable of restricting access from what the DoD defines as nonsecure zones. Nonsecure zones are defined as any IP, subnet, or region that is defined as a threat to the organization. The nonsecure zones must be defined for public web servers logically located in a DMZ, as well as private web servers with perimeter protection devices. By restricting access from nonsecure zones, through the internal web server access list, the Apache web server can stop or slow denial-of-service (DoS) attacks on the web server.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214259\n# Severity: medium\n\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\nif [ -z \"$HTTPD_ROOT\" ] || [ -z \"$SERVER_CONFIG_FILE\" ]; then\n    echo \"Unable to determine HTTPD_ROOT or SERVER_CONFIG_FILE\"\n    exit 1\nfi\n\nHTTPD_CONF=\"$HTTPD_ROOT/$SERVER_CONFIG_FILE\"\n\nif [ ! -f \"$HTTPD_CONF\" ]; then\n    echo \"httpd.conf file not found\"\n    exit 1\nfi\n\nREQUIRE_ALL=$(cat \"$HTTPD_CONF\" | grep -i \"RequireAll\")\n\nif [ -z \"$REQUIRE_ALL\" ]; then\n    echo \"RequireAll is not configured\"\n    exit 1\nfi\n\n# Assuming that the IP ranges should be within the private IP address space\nif echo \"$REQUIRE_ALL\" | grep -Pv 'Require ip (10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.)'; then\n    echo \"IP ranges configured to allow are not restrictive enough\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:15.278727+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214260",
        "previousName": "",
        "_id": 9032,
        "title": "During an attack on the Apache web server or any of the hosted applications, the System Administrator (SA) may need to disconnect or disable access by users to stop the attack.\n\nThe Apache web server must be configured to disconnect users from a hosted application without compromising other hosted applications unless deemed necessary to stop the attack. Methods to disconnect or disable connections are to stop the application service for a specified hosted application, stop the Apache web server, or block all connections through the Apache web server access list.\n\nThe Apache web server capabilities used to disconnect or disable users from connecting to hosted applications and the Apache web server must be documented to make certain that, during an attack, the proper action is taken to conserve connectivity to any other hosted application if possible and to make certain log data is conserved for later forensic analysis.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214260\n# Severity: medium\n\necho \"Finding ID: V-214260\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"This STIG check requires manual verification. Please interview the SA and Web Manager.\"\necho \"Verify there are documented procedures for shutting down an Apache website in the event of an attack.\"\necho \"If the web server is not capable of or cannot be configured to disconnect or disable remote access to the hosted applications when necessary, this is a finding.\"\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:27.043539+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214261",
        "previousName": "",
        "_id": 9033,
        "title": "By separating Apache web server security functions from non-privileged users, roles can be developed that can then be used to administer the Apache web server. Forcing users to change from a non-privileged account to a privileged account when operating on the Apache web server or on security-relevant information forces users to only operate as a Web Server Administrator when necessary. Operating in this manner allows for better logging of changes and better forensic information and limits accidental changes to the Apache web server.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214261\n# Severity: medium\n\n# Check if Apache is installed\nif ! command -v apache2 &> /dev/null\nthen\n    echo \"Apache is not installed. Exiting.\"\n    exit 0\nfi\n\n# Get the Apache configuration file path\napache_config_file=$(apache2 -V | grep SERVER_CONFIG_FILE | cut -d'=' -f2 | tr -d '\"')\n\n# Check the permissions of the Apache configuration file\npermissions=$(stat -c %a \"$apache_config_file\")\n\n# Check the owner of the Apache configuration file\nowner=$(stat -c %U \"$apache_config_file\")\n\n# Check the group of the Apache configuration file\ngroup=$(stat -c %G \"$apache_config_file\")\n\n# If the owner is not root, or the group is not root, or the permissions are not 644, then exit with 1\nif [[ \"$owner\" != \"root\" ]] || [[ \"$group\" != \"root\" ]] || [[ \"$permissions\" != \"644\" ]]\nthen\n    echo \"The Apache configuration file does not have the correct permissions or ownership. Exiting.\"\n    exit 1\nfi\n\n# If everything is fine, then exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:33.733491+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214262",
        "previousName": "",
        "_id": 9034,
        "title": "To make certain that the logging mechanism used by the web server has sufficient storage capacity in which to write the logs, the logging mechanism needs to be able to allocate log record storage capacity.\n\nThe task of allocating log record storage capacity is usually performed during initial installation of the logging mechanism. The System Administrator will usually coordinate the allocation of physical drive space with the Web Server Administrator along with the physical location of the partition and disk. Refer to NIST SP 800-92 for specific requirements on log rotation and storage dependent on the impact of the web server.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214262\n# Severity: medium\n\necho \"Finding ID: V-214262\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Check Content: Work with SIEM administrator to determine log storage capacity. If there is no setting within a SIEM to accommodate enough a large logging capacity, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:39.056065+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214263",
        "previousName": "",
        "_id": 9035,
        "title": "Writing events to a centralized management audit system offers many benefits to the enterprise over having dispersed logs. Centralized management of audit records and logs provides for efficiency in maintenance and management of records, enterprise analysis of events, and backup and archiving of event records enterprise-wide. The web server and related components are required to be capable of writing logs to centralized audit log servers.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214263\n# Severity: medium\n\necho \"Finding ID: V-214263\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Check Content: Work with SIEM administrator to determine audit configurations. If there is a setting within the SIEM that could impede the ability to write specific log record content, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:43.590067+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214264",
        "previousName": "",
        "_id": 9036,
        "title": "A web server will typically use logging mechanisms for maintaining a historical log of activity that occurs within a hosted application. This information can then be used for diagnostic purposes, forensics purposes, or other purposes relevant to ensuring the availability and integrity of the hosted application.\n\nWhile it is important to log events identified as being critical and relevant to security, it is equally important to notify the appropriate personnel in a timely manner so they are able to respond to events as they occur. \n\nManual review of the web server logs may not occur in a timely manner, and each event logged is open to interpretation by a reviewer. By integrating the web server into an overall or organization-wide log review, a larger picture of events can be viewed, and analysis can be done in a timely and reliable manner.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214264\n# Severity: medium\n\necho \"Finding ID: V-214264\"\necho \"STIG Name: apache_server_2.4_unix_server\"\necho \"Severity: medium\"\necho \"Check Content: Work with the SIEM administrator to determine current security integrations. If the SIEM is not integrated with security, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:42:56.874965+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214265",
        "previousName": "",
        "_id": 9037,
        "title": "If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis across multiple devices and log records.\n\nTime stamps generated by the Apache web server include date and time. Time is commonly expressed in UTC, a modern continuation of GMT, or local time with an offset from UTC.\n\nWithout sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records.\n\nTime stamps generated by the Apache web server include date and time and must be to a granularity of one second.\n\nSatisfies: SRG-APP-000374-WSR-000172, SRG-APP-000375-WSR-000171",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214265\n# Severity: medium\n\n# Determine the location of the \"HTTPD_ROOT\" directory and the \"httpd.conf\" file\nHTTPD_ROOT=$(apachectl -V | egrep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | egrep -i 'server_config_file' | cut -d'\"' -f2)\n\n# Full path to httpd.conf\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\n# Check if \"LogFormat\" directive exists\nif ! grep -iq \"LogFormat\" \"$HTTPD_CONF\"; then\n  echo \"LogFormat directive does not exist\"\n  exit 1\nfi\n\n# Check if \"%t\" flag is present in \"LogFormat\" directive\nif ! grep -iq \"LogFormat\" \"$HTTPD_CONF\" | grep -iq \"%t\"; then\n  echo \"Time is not mapped to UTC or GMT time in LogFormat directive\"\n  exit 1\nfi\n\n# If the script has not exited by now, the check has passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:43:04.558057+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214266",
        "previousName": "",
        "_id": 9038,
        "title": "Web servers provide numerous processes, features, and functionalities that use TCP/IP ports. Some of these processes may be deemed unnecessary or too unsecure to run on a production system.\n\nThe Apache web server must provide the capability to disable or deactivate network-related services that are deemed to be non-essential to the server mission, are too unsecure, or are prohibited by the Ports, Protocols, and Services Management (PPSM) Category Assurance List (CAL) and vulnerability assessments.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214266\n# Severity: medium\n\n# This script checks if HTTP and HTTPS are used in accordance with well known ports (80 and 443)\n\nhttp_port=$(netstat -tuln | grep ':80 ')\nhttps_port=$(netstat -tuln | grep ':443 ')\n\nif [[ -z \"$http_port\" || -z \"$https_port\" ]]; then\n  echo \"V-214266: HTTP or HTTPS not used in accordance with well known ports (80 and 443)\"\n  exit 1\nelse\n  echo \"HTTP and HTTPS are used in accordance with well known ports (80 and 443)\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:43:17.830209+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214267",
        "previousName": "",
        "_id": 9039,
        "title": "An attacker has at least two reasons to stop a web server. The first is to cause a denial of service (DoS), and the second is to put in place changes the attacker made to the web server configuration.\n\nTo prohibit an attacker from stopping the Apache web server, the process ID (pid) of the web server and the utilities used to start/stop it must be protected from access by non-privileged users. By knowing the \"pid\" and having access to the Apache web server utilities, a non-privileged user has a greater capability of stopping the server, whether intentionally or unintentionally.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214267\n# Severity: medium\n\n# Check httpd.pid file permissions and ownership\nhttpd_pid_path=$(find / -name \"httpd.pid\" 2>/dev/null)\nhttpd_pid_permissions=$(stat -c %a \"$httpd_pid_path\")\nhttpd_pid_owner=$(stat -c %U \"$httpd_pid_path\")\n\nif [[ $httpd_pid_permissions -ne 644 ]] || [[ $httpd_pid_owner != \"root\" ]]; then\n  echo \"httpd.pid file permissions or ownership is incorrect\"\n  exit 1\nfi\n\n# Check Apache service utilities permissions and ownership\nservice_path=\"/usr/sbin/service\"\napachectl_path=\"/usr/sbin/apachectl\"\n\nservice_permissions=$(stat -c %a \"$service_path\")\nservice_owner=$(stat -c %U \"$service_path\")\n\napachectl_permissions=$(stat -c %a \"$apachectl_path\")\napachectl_owner=$(stat -c %U \"$apachectl_path\")\n\nif [[ $service_permissions -ne 755 ]] || [[ $service_owner != \"root\" ]] || [[ $apachectl_permissions -ne 755 ]] || [[ $apachectl_owner != \"root\" ]]; then\n  echo \"Apache service utilities permissions or ownership is incorrect\"\n  exit 1\nfi\n\n# If all checks pass\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:43:29.030698+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214268",
        "previousName": "",
        "_id": 9040,
        "title": "A cookie can be read by client-side scripts easily if cookie properties are not set properly. By allowing cookies to be read by the client-side scripts, information such as session identifiers could be compromised and used by an attacker who intercepts the cookie. Setting cookie properties (i.e., HttpOnly property) to disallow client-side scripts from reading cookies better protects the information inside the cookie.\n\nSatisfies: SRG-APP-000439-WSR-000154, SRG-APP-000439-WSR-000155",
        "script": "\n#!/bin/bash\n\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214268\n# Severity: medium\n\nHTTPD_ROOT=$(apachectl -V | grep -i 'httpd_root' | cut -d'\"' -f2)\nSERVER_CONFIG_FILE=$(apachectl -V | grep -i 'server_config_file' | cut -d'\"' -f2)\nHTTPD_CONF=\"${HTTPD_ROOT}/${SERVER_CONFIG_FILE}\"\n\nSESSION_STATUS=$(cat ${HTTPD_CONF} | grep -i \"Session\" | awk '{print $2}')\nSESSION_COOKIE_NAME=$(cat ${HTTPD_CONF} | grep -i \"SessionCookieName\" | awk '{print $2}')\n\nif [[ -z ${SESSION_STATUS} || -z ${SESSION_COOKIE_NAME} ]]; then\n    echo \"Session or SessionCookieName directive is not present\"\n    exit 1\nfi\n\nif [[ ${SESSION_STATUS} != \"on\" || ${SESSION_COOKIE_NAME} != *\"httpOnly\"* || ${SESSION_COOKIE_NAME} != *\"Secure\"* ]]; then\n    echo \"Session is not set to on or SessionCookieName does not contain httpOnly and Secure\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:43:43.054277+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214269",
        "previousName": "",
        "_id": 9041,
        "title": "During the initial setup of a Transport Layer Security (TLS) connection to the Apache web server, the client sends a list of supported cipher suites in order of preference. The Apache web server will reply with the cipher suite it will use for communication from the client list. If an attacker can intercept the submission of cipher suites to the Apache web server and place, as the preferred cipher suite, a weak export suite, the encryption used for the session becomes easy for the attacker to break, often within minutes to hours.\n\nConfiguring the Apache server with only strong ciphersuites, denying or disabling weak ciphersuites, will prevent this vulnerability.",
        "script": "\n#!/bin/bash\n\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214269\n# Severity: medium\n\nhttpd_conf_location=$(httpd -V | grep -i SERVER_CONFIG_FILE | cut -d '\"' -f2)\nssl_conf_location=\"/etc/httpd/conf.d/ssl.conf\"\n\nhttpd_conf_cipher=$(cat $httpd_conf_location | grep -i SSLCipherSuite)\nssl_conf_cipher=$(cat $ssl_conf_location | grep -i SSLCipherSuite)\n\nif [[ $httpd_conf_cipher != *'!EXPORT'* ]] || [[ $httpd_conf_cipher != *'!EXP'* ]] || [[ -z $httpd_conf_cipher ]]; then\n    echo \"Finding ID: V-214269. The SSLCipherSuite directive in httpd.conf does not contain !EXPORT or !EXP or there are no enabled SSLCipherSuite directives.\"\n    exit 1\nfi\n\nif [[ $ssl_conf_cipher != *'!EXPORT'* ]] || [[ $ssl_conf_cipher != *'!EXP'* ]] || [[ -z $ssl_conf_cipher ]]; then\n    echo \"Finding ID: V-214269. The SSLCipherSuite directive in ssl.conf does not contain !EXPORT or !EXP or there are no enabled SSLCipherSuite directives.\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:43:55.319188+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214270",
        "previousName": "",
        "_id": 9042,
        "title": "Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nThe Apache web server will be configured to check for and install security-relevant software updates from an authoritative source within an identified time period from the availability of the update. By default, this time period will be every 24 hours.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214270\n# Severity: medium\n\n# Get the installed version of Apache\ninstalled_version=$(httpd -v | awk -F\"[/.]\" 'NR==1{print $4\".\"$5}')\n\n# Get the latest version of Apache from the official website\nlatest_version=$(curl -s https://httpd.apache.org/ | grep -oP '(?<=The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards. <p>The latest version of Apache httpd is )[^<]*')\n\n# Compare the installed version with the latest version\nif [[ $(echo \"$installed_version $latest_version\" | awk '{print ($1 < $2)}') -eq 1 ]]; then\n    echo \"Apache version is outdated\"\n    exit 1\nelse\n    echo \"Apache version is up to date\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-05T21:44:06.444594+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214271",
        "previousName": "",
        "_id": 9043,
        "title": "During installation of the Apache web server software, accounts are created for the Apache web server to operate properly. The accounts installed can have either no password installed or a default password, which will be known and documented by the vendor and the user community.\n\nThe first things an attacker will try when presented with a logon screen are the default user identifiers with default passwords. Installed applications may also install accounts with no password, making the logon even easier. Once the Apache web server is installed, the passwords for any created accounts should be changed and documented. The new passwords must meet the requirements for all passwords, i.e., uppercase/lowercase characters, numbers, special characters, time until change, reuse policy, etc. \n\nService accounts or system accounts that have no logon capability do not need to have passwords set or changed.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214271\n# Severity: high\n\n# Identify the account that is running the \"httpd\" process\nhttpd_account=$(ps -ef | grep -i httpd | grep -v grep | awk '{print $1}' | uniq)\n\n# Check to see if the account has a valid login shell\nlogin_shell=$(cut -d: -f1,7 /etc/passwd | grep -i $httpd_account)\n\n# If the service account has a valid login shell, verify that no password is configured for the account\npassword=$(cut -d: -f1,2 /etc/shadow | grep -i $httpd_account)\n\nif [[ $login_shell != *\"/sbin/nologin\"* ]] && [[ $password != *\"!!\"* ]]; then\n    echo \"STIG Finding ID: V-214271 - The account running the httpd process has a valid login shell and a password defined.\"\n    exit 1\nelse\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-05T21:44:15.655889+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214272",
        "previousName": "",
        "_id": 9044,
        "title": "Configuring the Apache web server to implement organization-wide security implementation guides and security checklists guarantees compliance with federal standards and establishes a common security baseline across the DoD that reflects the most restrictive security posture consistent with operational requirements.\n\nConfiguration settings are the set of parameters that can be changed that affect the security posture and/or functionality of the system. Security-related parameters are parameters impacting the security state of the Apache web server, including those required to satisfy other security control requirements.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214272\n# Severity: low\n\n# This script checks if the Apache server is using well-known ports (80 and 443) or those ports and services as registered and approved for use by the DoD Ports, Protocols, and Services Management (PPSM).\n\nAPACHE_CONFIG='/etc/httpd/conf/httpd.conf'\n\nif grep -P '^Listen 80$|^Listen 443$' $APACHE_CONFIG > /dev/null\nthen\n    echo \"Apache server is using well-known ports (80 and 443)\"\n    exit 0\nelse\n    echo \"Apache server is not using well-known ports (80 and 443). Please ensure any variation in PPS is documented, registered, and approved by the PPSM.\"\n    exit 1\nfi\n\n",
        "severity": "low"
    },
    {
        "modified": "2023-12-05T21:44:22.656777+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214273",
        "previousName": "",
        "_id": 9045,
        "title": "Many vulnerabilities are associated with older\u00a0versions of web server software. As hot fixes and patches are issued, these solutions are included in the next\u00a0version\u00a0of the server software. Maintaining the web server at a current\u00a0version\u00a0makes the efforts of a malicious user to exploit the web service more difficult.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214273\n# Severity: high\n\n# Check Apache version\napache_version=$(httpd -v | grep \"Server version\" | awk -F'/' '{print $2}' | awk '{print $1}')\n\n# Compare with minimum required version\nmin_version=\"2.4\"\n\nif [[ $(echo -e \"$apache_version\\n$min_version\" | sort -V | head -n1) = $min_version ]]; then\n    echo \"Apache version is compliant\"\n    exit 0\nelse\n    echo \"Apache version is not compliant\"\n    exit 1\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-05T21:44:31.402880+00:00",
        "owner": "spigler",
        "name": "apache_server_2.4_unix_server-V-214274",
        "previousName": "",
        "_id": 9046,
        "title": "In addition to OS restrictions, access rights to files and directories can be set on a website using the web server software. That is, in addition to allowing or denying all access rights, a rule can be specified that allows or denies partial access rights. For example, users can be given read-only access rights to files to view the information but not change the files.\n\nThis check verifies that the\u00a0htpasswd\u00a0file is only accessible by System Administrators (SAs) or Web Managers, with the account running the web service having group permissions of read and execute.\u00a0\"htpasswd\"\u00a0is a utility used by Netscape and Apache to provide for password access to designated websites.",
        "script": "\n#!/bin/bash\n# STIG Name: apache_server_2.4_unix_server\n# Finding ID: V-214274\n# Severity: medium\n\nhtpasswd_file=$(find / -name htpasswd 2>/dev/null)\n\nif [ -z \"$htpasswd_file\" ]; then\n    echo \"htpasswd file not found\"\n    exit 1\nfi\n\npermissions=$(stat -c %a \"$htpasswd_file\")\n\nif [ \"$permissions\" -gt 550 ]; then\n    echo \"Permissions on htpasswd are greater than 550\"\n    exit 1\nfi\n\nowner=$(stat -c %U \"$htpasswd_file\")\n\nif [ \"$owner\" != \"root\" ] && [ \"$owner\" != \"webmanager\" ]; then\n    echo \"Owner of htpasswd is not SA or Web Manager account\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    }
]