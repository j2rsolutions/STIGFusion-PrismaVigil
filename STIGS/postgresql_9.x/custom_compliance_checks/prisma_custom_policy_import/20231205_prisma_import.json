[
    {
        "modified": "2023-12-06T02:08:20.629034+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214048",
        "previousName": "",
        "_id": 9000,
        "title": "In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214048\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Get the port postgresql is running on\nport=$(psql -t -c \"SHOW port\")\n\n# Check if the port is prohibited\nif [[ $port -eq 5432 ]]; then\n    echo \"Port configuration is prohibited\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:08:41.923286+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214049",
        "previousName": "",
        "_id": 9001,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214049\n# Severity: medium\n\n# This script checks if audit records exist without the outcome of the event that occurred.\n\n# Assuming that the PGDATA environment variable is set and postgres is the database administrator\n\n# Create a table, insert a value, alter the table and update the table\nsudo -u postgres psql -c \"CREATE TABLE stig_test(id INT); INSERT INTO stig_test(id) VALUES (0); ALTER TABLE stig_test ADD COLUMN name text; UPDATE stig_test SET id = 1 WHERE id = 0;\"\n\n# As a user without access to the stig_test table, try to insert a value, alter the table and update the table\n# These commands should generate errors\nsudo -u postgres psql -c \"INSERT INTO stig_test(id) VALUES (1); ALTER TABLE stig_test DROP COLUMN name; UPDATE stig_test SET id = 0 WHERE id = 1;\"\n\n# As the database administrator, drop the test table\nsudo -u postgres psql -c \"DROP TABLE stig_test;\"\n\n# Check the latest log file for errors\nerrors=$(sudo -u postgres cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep -E \"ERROR: permission denied for relation stig_test|ERROR: must be owner of relation stig_test\")\n\n# If audit records exist without the outcome of the event that occurred, exit with 1\nif [[ -z \"$errors\" ]]; then\n    echo \"Audit records exist without the outcome of the event that occurred.\"\n    exit 1\nelse\n    echo \"Audit records include the outcome of the event that occurred.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:08:50.650028+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214050",
        "previousName": "",
        "_id": 9002,
        "title": "Security flaws with software applications, including database management systems, are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality, will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214050\n# Severity: high\n\n# Check the installed version of PostgreSQL\ninstalled_version=$(sudo -u postgres psql --version | awk '{print $3}')\n\n# Check the latest version of PostgreSQL from the official website\nlatest_version=$(curl -s http://www.postgresql.org/support/versioning/ | grep -oP 'The current version is \\K[^<]+')\n\n# Compare the installed version with the latest version\nif [[ \"$installed_version\" != \"$latest_version\" ]]; then\n    echo \"PostgreSQL is not at the latest version. Current version: $installed_version, Latest version: $latest_version\"\n    exit 1\nelse\n    echo \"PostgreSQL is at the latest version: $installed_version\"\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:09:05.472836+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214051",
        "previousName": "",
        "_id": 9003,
        "title": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification. \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations. \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214051\n# Severity: medium\n\n# Check log_file_mode in postgresql.conf\nlog_file_mode=$(sudo -u postgres grep \"log_file_mode\" ${PGDATA?}/postgresql.conf)\n\nif [[ $log_file_mode != *\"0600\"* ]]; then\n  echo \"log_file_mode permissions are not 0600\"\n  exit 1\nfi\n\n# Check log_directory in postgresql.conf\nlog_directory=$(sudo -u postgres grep \"log_directory\" ${PGDATA?}/postgresql.conf)\n\n# Check permissions of the logs\nlog_permissions=$(sudo -u postgres ls -la ${PGDATA?}/pg_log)\n\nif [[ $log_permissions != *\"-rw",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:09:15.815779+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214052",
        "previousName": "",
        "_id": 9004,
        "title": "Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in non-centralized account stores, such as multiple servers. Account management functions can also include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nPostgreSQL must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214052\n# Severity: high\n\n# Check if PGDATA environment variable is set\nif [ -z \"$PGDATA\" ]; then\n    echo \"PGDATA environment variable is not set. Please set it and rerun the script.\"\n    exit 1\nfi\n\n# Check pg_hba.conf file for any records with a different auth-method than gss, sspi, or ldap\nif grep -Pvq '^(#.*|\\s*)$' $PGDATA/pg_hba.conf | grep -Pvq '(gss|sspi|ldap)'; then\n    echo \"There are records with a different auth-method than gss, sspi, or ldap in pg_hba.conf\"\n    exit 1\nelse\n    echo \"All records in pg_hba.conf use an auth-method of gss, sspi, or ldap\"\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:09:22.067479+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214053",
        "previousName": "",
        "_id": 9005,
        "title": "Any PostgreSQL or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages need to be carefully considered by the organization and development team.\n\nDatabases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, user names, and other system information not required for troubleshooting but very useful to someone targeting the system.\n\nCarefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214053\n# Severity: medium\n\n# Connect to the PostgreSQL database and run the SQL command\noutput=$(psql -U postgres -d mydatabase -c \"SELECT current_setting('client_min_messages');\")\n\n# Check if client_min_messages is not set to error\nif [[ $output != *\"error\"* ]]; then\n  echo \"client_min_messages is not set to error\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:09:29.439368+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214054",
        "previousName": "",
        "_id": 9006,
        "title": "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214054\n# Severity: medium\n\n# Check the permissions of configuration files for the database\nsudo su - postgres -c \"find ${PGDATA?} ! -user postgres -type f -exec echo 'test permission failure' {} \\; -exec exit 1 \\;\"\n\n# Check the permissions on the shared libraries for PostgreSQL\nfor dir in bin include lib share\ndo\n  sudo find /usr/pgsql-${PGVER?}/$dir ! -user root -type f -exec echo 'test permission failure' {} \\; -exec exit 1 \\;\ndone\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:09:44.388521+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214055",
        "previousName": "",
        "_id": 9007,
        "title": "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database code can lead to unauthorized or compromised installations.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214055\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check ownership and permissions of postgresql configuration files\nPGDATA=$(sudo -u postgres psql -t -P format=unaligned -c 'show data_directory;')\nOWNER=$(stat -c '%U' $PGDATA)\nPERMISSIONS=$(stat -c '%a' $PGDATA)\n\nif [[ $OWNER != \"postgres\" ]] || [[ $PERMISSIONS -gt 700 ]]\nthen\n    echo \"postgresql configuration files are not properly owned or have incorrect permissions\"\n    exit 1\nfi\n\n# Check ownership of postgresql objects\nOBJECTS=$(sudo -u postgres psql -t -P format=unaligned -c \"\\df+\")\nIFS=$'\\n'\nfor OBJECT in $OBJECTS\ndo\n    OWNER=$(echo $OBJECT | awk '{print $1}')\n    if [[ $OWNER != \"postgres\" ]]\n    then\n        echo \"postgresql object $OBJECT is not owned by postgres\"\n        exit 1\n    fi\ndone\n\necho \"postgresql configuration files and objects are properly owned and have correct permissions\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:09:49.818292+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214056",
        "previousName": "",
        "_id": 9008,
        "title": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.\n\nPostgreSQL passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users. Disclosure of passwords may easily lead to unauthorized access to the database.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214056\n# Severity: high\n\n# Check if any entries in pg_hba.conf use the auth_method \"password\"\nif sudo su - postgres -c \"cat ${PGDATA?}/pg_hba.conf\" | grep -q \"password\"; then\n    echo \"V-214056: PostgreSQL is using password authentication method\"\n    exit 1\nelse\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:10:01.611599+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214057",
        "previousName": "",
        "_id": 9009,
        "title": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access PostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214057\n# Severity: high\n\n# Check the privileges of all roles in the database\nROLE_PRIVILEGES=$(sudo -u postgres psql -c '\\du')\n\n# Check the configured privileges for tables and columns\nTABLE_COLUMN_PRIVILEGES=$(sudo -u postgres psql -c '\\dp')\n\n# Check the configured authentication settings in pg_hba.conf\nAUTH_SETTINGS=$(sudo -u postgres cat ${PGDATA?}/pg_hba.conf)\n\n# Echo the results for manual review\necho \"Role Privileges:\"\necho \"$ROLE_PRIVILEGES\"\necho \"Table and Column Privileges:\"\necho \"$TABLE_COLUMN_PRIVILEGES\"\necho \"Authentication Settings:\"\necho \"$AUTH_SETTINGS\"\n\n# Exit with a status code of 0\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:10:22.485634+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214058",
        "previousName": "",
        "_id": 9010,
        "title": "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214058\n# Severity: medium\n\n# Assuming the schema name is 'public' and table name is 'users'\nSCHEMA_NAME='public'\nTABLE_NAME='users'\n\n# Check if security labeling is required\nSECURITY_LABELING_REQUIRED=1  # Set this to 1 if security labeling is required, else 0\n\nif [ $SECURITY_LABELING_REQUIRED -eq 0 ]; then\n  echo \"Security labeling is not required\"\n  exit 0\nfi\n\n# Check if policy is attached to the table\nPOLICY=$(sudo -u postgres psql -c \"\\d+ ${SCHEMA_NAME}.${TABLE_NAME}\" | grep -i 'Policies')\n\nif [ -z \"$POLICY\" ]; then\n  echo \"No policy attached to the table\"\n  exit 1\nfi\n\n# Check if security labeling is implemented according to system documentation\n# This is a manual check and needs to be replaced with actual implementation\nSECURITY_LABELING_IMPLEMENTED=1  # Set this to 1 if security labeling is implemented according to system documentation, else 0\n\nif [ $SECURITY_LABELING_IMPLEMENTED -eq 0 ]; then\n  echo \"Security labeling is not implemented according to system documentation\"\n  exit 1\nfi\n\n# Check if security labeling reliably maintains labels on information in storage\n# This is a manual check and needs to be replaced with actual implementation\nSECURITY_LABELING_MAINTAINED=1  # Set this to 1 if security labeling reliably maintains labels on information in storage, else 0\n\nif [ $SECURITY_LABELING_MAINTAINED -eq 0 ]; then\n  echo \"Security labeling does not reliably maintain labels on information in storage\"\n  exit 1\nfi\n\necho \"All checks passed\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:10:37.428517+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214059",
        "previousName": "",
        "_id": 9011,
        "title": "Database management includes the ability to control the number of users and user sessions utilizing PostgreSQL. Unlimited concurrent connections to PostgreSQL could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to PostgreSQL (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to PostgreSQL by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms.)",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214059\n# Severity: medium\n\n# Check the total amount of connections allowed by the database\nMAX_CONNECTIONS=$(sudo -u postgres psql -c \"SHOW max_connections\" | awk 'NR==3{print $1}')\n\n# Replace the value 100 with the maximum connections allowed by your organization\nif [ \"$MAX_CONNECTIONS\" -gt 100 ]; then\n  echo \"Total amount of connections is greater than documented by the organization\"\n  exit 1\nfi\n\n# Check the amount of connections allowed for each role\nROLE_CONNECTIONS=$(sudo -u postgres psql -c \"SELECT rolname, rolconnlimit from pg_authid\")\n\n# Replace the value 10 with the maximum connections allowed per role by your organization\nwhile read -r line; do\n  ROLE=$(echo \"$line\" | awk '{print $1}')\n  CONNECTIONS=$(echo \"$line\" | awk '{print $2}')\n  if [ \"$CONNECTIONS\" -gt 10 ] || [ \"$CONNECTIONS\" -eq -1 ]; then\n    echo \"Role $ROLE has more connections configured than documented by the organization\"\n    exit 1\n  fi\ndone <<< \"$ROLE_CONNECTIONS\"\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:10:47.563160+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214060",
        "previousName": "",
        "_id": 9012,
        "title": "If PostgreSQL were to allow any user to make changes to database structure or logic, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214060\n# Severity: medium\n\n# Check database permissions\nsudo su - postgres -c \"psql -c '\\dp *.*'\" | grep -q -v 'r\\|w\\|a'\nif [ $? -eq 0 ]; then\n  echo 'Database permissions check failed'\n  exit 1\nfi\n\n# Check filesystem permissions\nls -la ${PGDATA?} | grep -q -v 'r\\|w\\|x'\nif [ $? -eq 0 ]; then\n  echo 'Filesystem permissions check failed'\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:10:59.138299+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214061",
        "previousName": "",
        "_id": 9013,
        "title": "Non-organizational users include all information system users other than organizational users, which includes organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the Nation.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214061\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check if postgres user exists\nif ! id -u postgres > /dev/null 2>&1; then\n    echo \"postgres user does not exist\"\n    exit 1\nfi\n\n# Get the list of all roles in the database\nroles=$(sudo -u postgres psql -c \"\\du\" | awk '{print $1}' | tail -n +4 | head -n -2)\n\n# Check if roles are unique\nif [[ $(echo \"$roles\" | sort | uniq -d | wc -l) -ne 0 ]]; then\n    echo \"Roles are not unique\"\n    exit 1\nfi\n\necho \"Roles are unique\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:16.443876+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214062",
        "previousName": "",
        "_id": 9014,
        "title": "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214062\n# Severity: medium\n\n# Assuming the schema name is 'public' and table name is 'users'\nSCHEMA_NAME='public'\nTABLE_NAME='users'\n\n# Check if security labeling is required\nSECURITY_LABELING_REQUIRED=1  # Set this to 1 if security labeling is required, else 0\n\nif [ $SECURITY_LABELING_REQUIRED -eq 0 ]; then\n  echo \"Security labeling is not required\"\n  exit 0\nfi\n\n# Check if policy is attached to the table\nPOLICY=$(sudo -u postgres psql -c \"\\d+ ${SCHEMA_NAME}.${TABLE_NAME}\" | grep -i 'Policies')\n\nif [ -z \"$POLICY\" ]; then\n  echo \"No policy attached to the table\"\n  exit 1\nfi\n\n# Check if security labeling is implemented according to system documentation\n# This is a manual check and needs to be replaced with actual implementation\nSECURITY_LABELING_IMPLEMENTED=1  # Set this to 1 if security labeling is implemented, else 0\n\nif [ $SECURITY_LABELING_IMPLEMENTED -eq 0 ]; then\n  echo \"Security labeling is not implemented according to system documentation\"\n  exit 1\nfi\n\n# Check if security labeling reliably maintains labels on information in storage\n# This is a manual check and needs to be replaced with actual implementation\nSECURITY_LABELING_MAINTAINED=1  # Set this to 1 if security labeling is maintained, else 0\n\nif [ $SECURITY_LABELING_MAINTAINED -eq 0 ]; then\n  echo \"Security labeling does not reliably maintain labels on information in storage\"\n  exit 1\nfi\n\necho \"All checks passed\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:20.539345+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214063",
        "previousName": "",
        "_id": 9015,
        "title": "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214063\n# Severity: medium\n\necho \"Finding ID: V-214063\"\necho \"This is a manual check that requires reviewing PostgreSQL code, application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:27.550710+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214064",
        "previousName": "",
        "_id": 9016,
        "title": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214064\n# Severity: medium\n\n# This script checks for dynamic code execution in PostgreSQL source code and application source code.\n# If dynamic code execution is found where static execution with strongly typed parameters could be used, the script will exit with 1.\n\n# Please replace \"/path/to/source\" with the actual path to your PostgreSQL and application source code.\n\nSOURCE_CODE_PATH=\"/path/to/source\"\n\nif grep -r -E \"EXECUTE format\\(|EXECUTE\\(\" $SOURCE_CODE_PATH; then\n    echo \"Dynamic code execution found\"\n    exit 1\nelse\n    echo \"No dynamic code execution found\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:33.121087+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214065",
        "previousName": "",
        "_id": 9017,
        "title": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214065\n# Severity: medium\n\necho \"Finding ID: V-214065\"\necho \"STIG Name: postgresql_9.x\"\necho \"Severity: medium\"\necho \"Manual Check: Review PostgreSQL source code (trigger procedures, functions) and application source code to identify cases of dynamic code execution. If dynamic code execution is employed without protective measures against code injection, this is a finding.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:39.641860+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214066",
        "previousName": "",
        "_id": 9018,
        "title": "In order to ensure sufficient storage capacity for the audit logs, PostgreSQL must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of PostgreSQL and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as: total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on PostgreSQL's ability to reuse the space formerly occupied by off-loaded records.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214066\n# Severity: medium\n\n# Check if PostgreSQL audit log space has run out\nif grep -q \"could not write to log file: No space left on device\" /var/log/postgresql/postgresql-9.x-main.log; then\n    echo \"PostgreSQL ran out of audit log space\"\n    exit 1\nelse\n    echo \"No incidents of PostgreSQL running out of audit log space\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:11:53.143395+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214067",
        "previousName": "",
        "_id": 9019,
        "title": "Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214067\n# Severity: medium\n\n# Check for unauthorized ownership of database objects\nsudo su - postgres -c \"psql -c '\\dn *.*'\" | grep -q unauthorized_user && echo 'Unauthorized user owns a schema' && exit 1\nsudo su - postgres -c \"psql -c '\\dt *.*'\" | grep -q unauthorized_user && echo 'Unauthorized user owns a table' && exit 1\nsudo su - postgres -c \"psql -c '\\ds *.*'\" | grep -q unauthorized_user && echo 'Unauthorized user owns a sequence' && exit 1\nsudo su - postgres -c \"psql -c '\\dv *.*'\" | grep -q unauthorized_user && echo 'Unauthorized user owns a view' && exit 1\nsudo su - postgres -c \"psql -c '\\df+ *.*'\" | grep -q unauthorized_user && echo 'Unauthorized user owns a function' && exit 1\n\n# Check for unauthorized privileges\nsudo su - postgres -c \"psql -c '\\dp *.*'\" | grep -q unauthorized_role && echo 'Unauthorized role has privileges' && exit 1\n\n# If no unauthorized ownership or privileges were found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:12:04.466301+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214068",
        "previousName": "",
        "_id": 9020,
        "title": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214068\n# Severity: medium\n\n# Check log_file_mode in postgresql.conf\nlog_file_mode=$(sudo -u postgres grep \"log_file_mode\" ${PGDATA?}/postgresql.conf)\n\nif [[ $log_file_mode != *\"0600\"* ]]; then\n  echo \"log_file_mode permissions are not 0600\"\n  exit 1\nfi\n\n# Check log_directory in postgresql.conf\nlog_directory=$(sudo -u postgres grep \"log_directory\" ${PGDATA?}/postgresql.conf)\n\n# Extract the directory path\nlog_directory_path=$(echo $log_directory | cut -d '=' -f2 | xargs)\n\n# Check the permissions of the logs\nlog_permissions=$(sudo -u postgres ls -la ${PGDATA?}/pg_log)\n\nif [[ $log_permissions != *\"-rw",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:12:10.310374+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214069",
        "previousName": "",
        "_id": 9021,
        "title": "If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by PostgreSQL must include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214069\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check the log_timezone setting\nlog_timezone=$(sudo -u postgres psql -c \"SHOW log_timezone\" | awk 'NR==3')\n\nif [[ $log_timezone != \"UTC\" ]]\nthen\n    echo \"log_timezone is not set to UTC\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:12:27.912646+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214070",
        "previousName": "",
        "_id": 9022,
        "title": "If PostgreSQL provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements. \n\nSome default PostgreSQL error messages can contain information that could aid an attacker in, among others things, identifying the database type, host address, or state of the database. Custom errors may contain sensitive customer information. \n\nIt is important that detailed error messages be visible only to those who are authorized to view them; that general users receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear only when relevant to the user's task. For example, a message along the lines of, \"An error has occurred. Unable to save your changes. If this problem persists, please contact your help desk\" would be relevant. A message such as \"Warning: your transaction generated a large number of page splits\" would likely not be relevant. \n\nAdministrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified according to organization-specific needs, with DBA approval.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214070\n# Severity: medium\n\n# Check client_min_messages setting\nclient_min_messages=$(sudo su - postgres -c \"grep 'client_min_messages' ${PGDATA?}/postgresql.conf\")\nif [[ $client_min_messages == *\"log\"* ]] || [[ $client_min_messages == *\"debug\"* ]]; then\n  echo \"client_min_messages is set to LOG or DEBUG\"\n  exit 1\nfi\n\n# Check log_directory and log_file_mode settings\nlog_directory=$(sudo su - postgres -c \"grep 'log_directory' ${PGDATA?}/postgresql.conf\")\nlog_file_mode=$(sudo su - postgres -c \"grep 'log_file_mode' ${PGDATA?}/postgresql.conf\")\n\n# Check log files permissions\nlog_files=$(ls -l $log_directory)\nwhile read -r line; do\n  permissions=$(echo $line | awk '{print $1}')\n  owner=$(echo $line | awk '{print $3}')\n  if [[ $permissions != \"-rw",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:12:36.208023+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214071",
        "previousName": "",
        "_id": 9023,
        "title": "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214071\n# Severity: medium\n\n# Check if PGDATA is owned by postgres\nif [ $(ls -ld $PGDATA | awk '{print $3}') != \"postgres\" ]; then\n  echo \"PGDATA is not owned by postgres\"\n  exit 1\nfi\n\n# Check if any role other than postgres has superuser access\nsudo -u postgres psql -c \"\\du\" | awk '{ if ($1 != \"postgres\" && $3 == \"Superuser\") { print $1 } }' | while read -r line\ndo\n  if [ ! -z \"$line\" ]; then\n    echo \"Role $line has superuser access\"\n    exit 1\n  fi\ndone\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:12:46.015760+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214072",
        "previousName": "",
        "_id": 9024,
        "title": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.\n\nA failure of database auditing will result in either the database continuing to function without auditing or in a complete halt to database operations. When audit processing fails, appropriate personnel must be alerted immediately to avoid further downtime or unaudited transactions\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the time from event detection to alert occurs in seconds or less).\n\nThe necessary monitoring and alerts may be implemented using features of PostgreSQL, the OS, third-party software, custom code, or a combination of these. The term \"the system\" is used to encompass all of these.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214072\n# Severity: medium\n\n# Check if the postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check if the postgresql is running\nif ! pgrep -x \"postgres\" > /dev/null\nthen\n    echo \"postgresql is not running\"\n    exit 1\nfi\n\n# Check if the real-time alert is enabled when auditing fails\nAUDIT_LOG_FAILURE=$(sudo -u postgres psql -c \"SHOW log_destination;\" | grep 'syslog')\n\nif [ -z \"$AUDIT_LOG_FAILURE\" ]\nthen\n    echo \"Real-time alert is not sent when auditing fails\"\n    exit 1\nelse\n    echo \"Real-time alert is sent when auditing fails\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:00.537232+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214073",
        "previousName": "",
        "_id": 9025,
        "title": "Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, PostgreSQL, associated applications, and infrastructure must leverage protection mechanisms.\n\nFor more information on configuring PostgreSQL to use SSL, consult the following documentation:\nhttps://www.postgresql.org/docs/current/ssl-tcp.html\n\nPostgres provides native support for using SSL connections to encrypt client/server communications.  To enable the use of SSL, the postgres \u201cssl\u201d configuration parameter must be set to \u201con\u201d and the database instance needs to be configured to use a valid server certificate and private key installed on the server.  With SSL enabled, connections made to the database server will default to being encrypted.  However, it is possible for clients to override the default and attempt to establish an unencrypted connection. To prevent connections made from non-local hosts from being unencrypted, the postgres host-based authentication settings should be configured to only allow hostssl (i.e., encrypted) connections.  The hostssl connections can be further configured to require that the client present a valid (trusted) SSL certificate for a connection.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214073\n# Severity: medium\n\n# Check if SSL is enabled\nSSL_ENABLED=$(sudo -u postgres psql -c \"SHOW ssl\" | grep 'on')\nif [[ -z \"$SSL_ENABLED\" ]]; then\n  echo \"SSL is not enabled\"\n  exit 1\nfi\n\n# Check if hostssl entries contain clientcert=1\nHOSTSSL_ENTRIES=$(sudo -u postgres grep hostssl ${PGDATA?}/pg_hba.conf | grep 'clientcert=1')\nif [[ -z \"$HOSTSSL_ENTRIES\" ]]; then\n  echo \"hostssl entries do not contain clientcert=1\"\n  exit 1\nfi\n\n# Check if any uncommented lines are not of TYPE \"hostssl\" and do not include the \"clientcert=1\" authentication option\nUNCOMMENTED_LINES=$(sudo -u postgres grep -v '^#' ${PGDATA?}/pg_hba.conf | grep -v 'hostssl' | grep -v 'clientcert=1')\nif [[ -n \"$UNCOMMENTED_LINES\" ]]; then\n  echo \"Uncommented lines are not of TYPE hostssl and do not include the clientcert=1 authentication option\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:08.974075+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214074",
        "previousName": "",
        "_id": 9026,
        "title": "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214074\n# Severity: medium\n\n# This script checks if any PostgreSQL database objects are owned by unauthorized users.\n\n# Please replace 'authorized_user' with the actual authorized username\nauthorized_user='authorized_user'\n\n# Check the ownership of objects in the database\nfor object in \"\\dn *.*\" \"\\dt *.*\" \"\\ds *.*\" \"\\dv *.*\" \"\\df+ *.*\"; do\n  owner=$(sudo -u postgres psql -t -c \"${object}\" | awk -F \"|\" '{print $2}' | xargs)\n  if [[ \"${owner}\" != \"${authorized_user}\" ]]; then\n    echo \"Unauthorized ownership found\"\n    exit 1\n  fi\ndone\n\necho \"No unauthorized ownership found\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:16.766772+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214075",
        "previousName": "",
        "_id": 9027,
        "title": "When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can have significant effects on the overall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions that can have a great impact on database security and operation. It is especially important to grant privileged access to only those persons who are qualified and authorized to use them.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214075\n# Severity: high\n\necho \"Finding ID: V-214075\"\necho \"STIG Name: postgresql_9.x\"\necho \"Severity: high\"\necho \"Manual Check: Review procedures for controlling, granting access to, and tracking use of the PostgreSQL software installation account(s). If access or use of this account is not restricted to the minimum number of personnel required or if unauthorized access to the account has been granted, this is a finding.\"\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:13:25.643765+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214076",
        "previousName": "",
        "_id": 9028,
        "title": "When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one application can lead to an exploit of other applications sharing the same security context. For example, an exploit to a web server process that leads to unauthorized administrative access to host system directories can most likely lead to a compromise of all applications hosted by the same system. Database software not installed using dedicated directories both threatens and is threatened by other hosted applications. Access controls defined for one application may by default provide access to the other application's database objects or directories. Any method that provides any level of separation of security context assists in the protection between applications.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214076\n# Severity: medium\n\n# Get the PostgreSQL library directory\npg_lib_dir=$(pg_config --libdir)\n\n# List all directories in the PostgreSQL library directory\ndirs_in_pg_lib_dir=$(ls -l $pg_lib_dir | grep '^d' | awk '{print $9}')\n\n# Check each directory\nfor dir in $dirs_in_pg_lib_dir\ndo\n    # If the directory is not a PostgreSQL directory, echo the finding and exit with 1\n    if [[ $dir != \"postgresql\"* ]]; then\n        echo \"Non-PostgreSQL directory found in PostgreSQL library directory: $dir\"\n        exit 1\n    fi\ndone\n\n# If no non-PostgreSQL directories were found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:37.445245+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214077",
        "previousName": "",
        "_id": 9029,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214077\n# Severity: medium\n\n# Check if PostgreSQL is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed, exiting with code 0\"\n    exit 0\nfi\n\n# Check if the PostgreSQL audit extension (pgAudit) is installed\nif ! psql -U postgres -c \"\\dx\" | grep -q pgaudit\nthen\n    echo \"pgAudit is not installed, exiting with code 1\"\n    exit 1\nfi\n\n# Check if the organization-defined additional information is in the audit records\n# Replace \"additional_info\" with the actual additional information defined by the organization\nif ! psql -U postgres -c \"SELECT * FROM pgaudit.log WHERE parameter = 'additional_info';\" | grep -q \"additional_info\"\nthen\n    echo \"Additional information is not contained in the audit records, exiting with code 1\"\n    exit 1\nfi\n\necho \"All checks passed, exiting with code 0\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:47.995907+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214078",
        "previousName": "",
        "_id": 9030,
        "title": "In certain situations, to provide required functionality, PostgreSQL needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214078\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check for SECURITY DEFINER functions\nSECURITY_DEFINER_FUNCTIONS=$(sudo -u postgres psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL\")\n\nif [[ -z \"$SECURITY_DEFINER_FUNCTIONS\" ]]; then\n    echo \"No SECURITY DEFINER functions found\"\n    exit 0\nelse\n    echo \"SECURITY DEFINER functions found\"\n    echo \"$SECURITY_DEFINER_FUNCTIONS\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:13:56.601319+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214079",
        "previousName": "",
        "_id": 9031,
        "title": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214079\n# Severity: medium\n\n# Attempt to create a table with incorrect syntax\nsudo su - postgres -c \"psql -c \\\"CREAT TABLEincorrect_syntax(id INT)\\\"\"\n\n# Check if the error was logged\nERROR_LOG=$(sudo su - postgres -c \"cat ~/${PGVER?}/data/pg_log/postgresql-*.log | grep 'ERROR: syntax error at or near \\\"CREAT\\\"'\")\n\nif [[ -z \"$ERROR_LOG\" ]]; then\n    echo \"V-214079: PostgreSQL is not logging syntax errors\"\n    exit 1\nelse\n    echo \"V-214079: PostgreSQL is logging syntax errors\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:05.321751+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214080",
        "previousName": "",
        "_id": 9032,
        "title": "Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214080\n# Severity: medium\n\n# Check if PostgreSQL uses syslog\nlog_destination=$(sudo -u postgres psql -c \"SHOW log_destination\" | grep syslog)\n\n# Check which log facility PostgreSQL is configured\nsyslog_facility=$(sudo -u postgres psql -c \"SHOW syslog_facility\")\n\n# If PostgreSQL audit records are not written directly to or systematically transferred to a centralized log management system, exit with 1\nif [[ -z \"$log_destination\" || -z \"$syslog_facility\" ]]; then\n    echo \"PostgreSQL audit records are not written directly to or systematically transferred to a centralized log management system\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:19.498027+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214081",
        "previousName": "",
        "_id": 9033,
        "title": "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.\n\nDatabase Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214081\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check access controls for pg_catalog and information_schema\nPG_CATALOG_ACCESS=$(sudo -u postgres psql -t -c \"\\dp pg_catalog.*\")\nINFORMATION_SCHEMA_ACCESS=$(sudo -u postgres psql -t -c \"\\dp information_schema.*\")\n\n# Check ownership of PostgreSQL functions\nPG_CATALOG_FUNC=$(sudo -u postgres psql -t -c \"\\df+ pg_catalog.*\")\nINFORMATION_SCHEMA_FUNC=$(sudo -u postgres psql -t -c \"\\df+ information_schema.*\")\n\n# Check if any user besides the database administrator(s) is listed in access privileges\nif [[ $PG_CATALOG_ACCESS == *\"=\"* ]] || [[ $INFORMATION_SCHEMA_ACCESS == *\"=\"* ]] || [[ $PG_CATALOG_FUNC == *\"=\"* ]] || [[ $INFORMATION_SCHEMA_FUNC == *\"=\"* ]]; then\n    echo \"Access privileges violation\"\n    exit 1\nfi\n\n# If no violations, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:31.848659+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214082",
        "previousName": "",
        "_id": 9034,
        "title": "Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214082\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check if PGDATA is set\nif [ -z \"$PGDATA\" ]\nthen\n    echo \"PGDATA is not set\"\n    exit 1\nfi\n\n# Switch to postgres user and check permissions\nsudo su - postgres << 'EOF'\npsql -c \"CREATE ROLE bob; SET ROLE bob; SET pgaudit.role='test';\" &> /dev/null\nif grep -q \"ERROR: permission denied to set parameter \\\"pgaudit.role\\\"\" ${PGDATA}/pg_log/postgresql-*.log; then\n    echo \"Denial is logged\"\nelse\n    echo \"Denial is not logged\"\n    exit 1\nfi\nEOF\n\n# Check postgresql.conf permissions\nif [ $(stat -c %U:%a ${PGDATA}/postgresql.conf) != \"postgres:600\" ]; then\n    echo \"postgresql.conf does not have correct permissions\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:45.168350+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214083",
        "previousName": "",
        "_id": 9035,
        "title": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214083\n# Severity: medium\n\n# Check log_file_mode\nlog_file_mode=$(sudo -u postgres psql -c \"SHOW log_file_mode\" | grep -v \"log_file_mode\" | xargs)\nif [[ $log_file_mode != \"600\" ]]; then\n  echo \"log_file_mode is not 600\"\n  exit 1\nfi\n\n# Check log_destination\nlog_destination=$(sudo -u postgres psql -c \"SHOW log_destination\" | grep -v \"log_destination\" | xargs)\n\n# Check log files permissions\nlog_files=$(ls -l ${PGDATA?}/pg_log/ | awk '{print $1, $9}')\nwhile read -r line; do\n  permissions=$(echo $line | awk '{print $1}')\n  if [[ $permissions != \"-rw",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:51.483502+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214084",
        "previousName": "",
        "_id": 9036,
        "title": "Previous versions of PostgreSQL components that are not removed from the information system after updates have been installed may be exploited by adversaries.\n\nSome PostgreSQL installation tools may remove older versions of software automatically from the information system. In other cases, manual review and removal will be required. In planning installations and upgrades, organizations must include steps (automated, manual, or both) to identify and remove the outdated modules.\n\nA transition period may be necessary when both the old and the new software are required. This should be taken into account in the planning.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214084\n# Severity: medium\n\n# Check for multiple versions of postgres\nversions=$(rpm -qa | grep postgres | wc -l)\n\nif [ $versions -gt 1 ]; then\n  echo \"Multiple versions of postgres are installed\"\n  exit 1\nelse\n  echo \"Only one version of postgres is installed\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:14:58.500854+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214085",
        "previousName": "",
        "_id": 9037,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214085\n# Severity: medium\n\n# Check if pgaudit.log contains \"ddl, write, role\"\nPGAUDIT_LOG_CONTENT=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep \"ddl, write, role\")\n\nif [[ -z \"$PGAUDIT_LOG_CONTENT\" ]]; then\n  echo \"pgaudit.log does not contain 'ddl, write, role'\"\n  exit 1\nelse\n  echo \"pgaudit.log contains 'ddl, write, role'\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:15:17.696134+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214086",
        "previousName": "",
        "_id": 9038,
        "title": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214086\n# Severity: medium\n\n# This script checks if the PostgreSQL database logs permission denials for each type of SQL command.\n\n# Define the PostgreSQL log file\nPG_LOG_FILE=\"${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log | head -n 1)\"\n\n# Define the SQL commands to test\nSQL_COMMANDS=(\n  \"CREATE TABLE stig_test_schema.test_table(id INT);\"\n  \"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\"\n  \"SELECT * FROM stig_test_schema.stig_test_table;\"\n  \"ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\"\n  \"UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\"\n  \"DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\"\n  \"PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table WHERE id=$1;\"\n  \"DROP TABLE stig_test_schema.stig_test_table;\"\n)\n\n# Execute each SQL command as role bob and check if the denial is logged\nfor SQL_COMMAND in \"${SQL_COMMANDS[@]}\"; do\n  sudo su - postgres -c \"psql -c \\\"SET ROLE bob; $SQL_COMMAND\\\"\"\n  if ! grep -q \"ERROR: permission denied for schema stig_test_schema\" \"$PG_LOG_FILE\"; then\n    echo \"Denial for command '$SQL_COMMAND' was not logged\"\n    exit 1\n  fi\ndone\n\n# If all denials were logged, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:15:25.893407+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214087",
        "previousName": "",
        "_id": 9039,
        "title": "For completeness of forensic analysis, it is necessary to track failed attempts to log on to PostgreSQL. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214087\n# Severity: medium\n\n# Attempt to log into the Postgres database with a non-existent user\npsql -d postgres -U non_existent_user > /dev/null 2>&1\n\n# Check the PostgreSQL log for a FATAL connection audit trail\nif sudo -u postgres grep -q \"FATAL: role \\\"non_existent_user\\\" does not exist\" ${PGDATA?}/pg_log/postgresql-*.log; then\n    echo \"Audit record generated for failed login attempt\"\n    exit 0\nelse\n    echo \"No audit record generated for failed login attempt\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:15:34.097321+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214088",
        "previousName": "",
        "_id": 9040,
        "title": "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to PostgreSQL lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs.\n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214088\n# Severity: medium\n\n# Check if the log file exists\nif [ ! -f \"${PGDATA?}/pg_log/postgresql-Tue.log\" ]; then\n    echo \"Log file does not exist\"\n    exit 1\nfi\n\n# Check if connections are logged\ngrep -q \"LOG: connection authorized\" \"${PGDATA?}/pg_log/postgresql-Tue.log\"\nif [ $? -ne 0 ]; then\n    echo \"Connections are not logged\"\n    exit 1\nfi\n\n# If the script has not exited by this point, the check has passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:15:44.732720+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214089",
        "previousName": "",
        "_id": 9041,
        "title": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214089\n# Severity: medium\n\n# Create a test role\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob\\\"\"\n\n# Test if audit records are generated from unsuccessful attempts at modifying security objects\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\\\"\"\n\n# Verify that the denials were logged\nLOG_OUTPUT=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep 'ERROR: permission denied for relation pg_authid'\")\n\nif [[ -z \"$LOG_OUTPUT\" ]]; then\n  echo \"Denials are not logged\"\n  exit 1\nelse\n  echo \"Denials are logged\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:15:58.246067+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214090",
        "previousName": "",
        "_id": 9042,
        "title": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn an SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE command.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214090\n# Severity: medium\n\n# Create a role\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob\\\"\"\n\n# Grant then revoke privileges from the role\nsudo su - postgres -c \"psql -c \\\"GRANT CONNECT ON DATABASE postgres TO bob\\\"\"\nsudo su - postgres -c \"psql -c \\\"REVOKE CONNECT ON DATABASE postgres FROM bob\\\"\"\n\n# Verify the events were logged\naudit_log=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1)\")\n\ngrant_log=$(echo \"$audit_log\" | grep \"GRANT CONNECT ON DATABASE postgres TO bob\")\nrevoke_log=$(echo \"$audit_log\" | grep \"REVOKE CONNECT ON DATABASE postgres FROM bob\")\n\nif [[ -z \"$grant_log\" || -z \"$revoke_log\" ]]; then\n    echo \"V-214090 - Audit records are not produced when privileges/permissions/role memberships are added or removed.\"\n    exit 1\nelse\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:16:08.897943+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214091",
        "previousName": "",
        "_id": 9043,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214091\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:16:23.786521+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214092",
        "previousName": "",
        "_id": 9044,
        "title": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to PostgreSQL.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214092\n# Severity: medium\n\n# Check if log_connections is enabled\nlog_connections=$(sudo -u postgres psql -c \"SHOW log_connections\" | grep 'on')\n\n# If log_connections is off, exit with 1\nif [ -z \"$log_connections\" ]; then\n  echo 'log_connections is off'\n  exit 1\nfi\n\n# Get the latest log file\nlatest_log=$(ls -Art /var/lib/pgsql/9.6/data/pg_log/ | tail -n 1)\n\n# Check if the previous connection to the database was logged\nlog_content=$(sudo -u postgres cat /var/lib/pgsql/9.6/data/pg_log/$latest_log | grep 'LOG:  connection authorized')\n\n# If an audit record is not generated each time a user (or other principal) logs on or connects to PostgreSQL, exit with 1\nif [ -z \"$log_content\" ]; then\n  echo 'Audit record not generated for each connection'\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:16:39.926619+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214093",
        "previousName": "",
        "_id": 9045,
        "title": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214093\n# Severity: medium\n\n# Assuming PGDATA is set and postgresql is installed\n# Create a test table, enable row level security, and create a policy\nsudo su - postgres -c \"psql -c \\\"CREATE TABLE stig_test(id INT)\\\"\"\nsudo su - postgres -c \"psql -c \\\"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\\\"\"\nsudo su - postgres -c \"psql -c \\\"CREATE POLICY lock_table ON stig_test USING ('postgres' = current_user)\\\"\"\n\n# Drop the policy and disable row level security\nsudo su - postgres -c \"psql -c \\\"DROP POLICY lock_table ON stig_test\\\"\"\nsudo su - postgres -c \"psql -c \\\"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\\\"\"\n\n# Check the latest log for the audit records\naudit_records=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep -E 'DROP POLICY|DISABLE ROW LEVEL SECURITY'\")\n\nif [[ -z \"$audit_records\" ]]; then\n    echo \"No audit records found for security objects deletion\"\n    exit 1\nelse\n    echo \"Audit records found for security objects deletion\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:16:50.781272+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214094",
        "previousName": "",
        "_id": 9046,
        "title": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214094\n# Severity: medium\n\n# Create a role 'bob'\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob\\\"\"\n\n# Attempt to retrieve information from the pg_authid table\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; SELECT * FROM pg_authid\\\"\"\n\n# Check the latest log for the error message\nlog_file=$(ls -t ${PGDATA?}/pg_log/ | head -1)\nerror_message=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$log_file | grep 'permission denied for relation pg_authid'\")\n\nif [[ -z \"$error_message\" ]]; then\n  echo \"Audit records are not produced when PostgreSQL denies retrieval of privileges/permissions/role memberships\"\n  exit 1\nelse\n  echo \"Audit records are produced when PostgreSQL denies retrieval of privileges/permissions/role memberships\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:17:01.328338+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214095",
        "previousName": "",
        "_id": 9047,
        "title": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn an SQL environment, deleting permissions is typically done via the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214095\n# Severity: medium\n\n# Create roles joe and bob\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE joe LOGIN\\\"\"\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob LOGIN\\\"\"\n\n# Attempt to alter role joe as bob\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; ALTER ROLE joe NOLOGIN;\\\"\"\n\n# Check the logs for the error message\nLOG_CHECK=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep 'ERROR: permission denied to alter role'\")\n\nif [[ -z \"$LOG_CHECK\" ]]; then\n    echo \"Audit logs not generated for unsuccessful attempts to delete privileges/permissions\"\n    exit 1\nelse\n    echo \"Audit logs generated for unsuccessful attempts to delete privileges/permissions\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:17:18.732711+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214096",
        "previousName": "",
        "_id": 9048,
        "title": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs to determine if any and every action on the database is permitted.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214096\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# List all role memberships for the database\nrole_memberships=$(sudo -u postgres psql -c \"\\du\")\n\n# Verify the query was logged\nlog_check=$(sudo -u postgres cat ${PGDATA?}/pg_log/$(ls -Art ${PGDATA?}/pg_log/ | tail -n 1) | grep \"SELECT r.rolname, r.rolsuper, r.rolinherit, r.rolcreaterole, r.rolcreatedb, r.rolcanlogin, r.rolconnlimit, r.rolvaliduntil, ARRAY(SELECT b.rolname FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE m.member = r.oid) as memberof , r.rolreplication , r.rolbypassrls FROM pg_catalog.pg_roles r ORDER BY 1\")\n\nif [[ -z \"$log_check\" ]]; then\n  echo \"Audit records are not produced\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:17:27.520533+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214097",
        "previousName": "",
        "_id": 9049,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214097\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:17:47.989847+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214098",
        "previousName": "",
        "_id": 9050,
        "title": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDROP\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214098\n# Severity: medium\n\n# Create a schema, test_schema, create a table, test_table, within test_schema, and insert a value\nsudo su - postgres -c \"psql -c \\\"CREATE SCHEMA test_schema\\\"\"\nsudo su - postgres -c \"psql -c \\\"CREATE TABLE test_schema.test_table(id INT)\\\"\"\nsudo su - postgres -c \"psql -c \\\"INSERT INTO test_schema.test_table(id) VALUES (0)\\\"\"\n\n# Create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from the test table\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; SELECT * FROM test_schema.test_table\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0)\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id = 0\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; DROP TABLE test_schema.test_table\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; DROP SCHEMA test_schema\\\"\"\n\n# Check if audit records are created for unsuccessful attempts at the specified access to the specified objects\naudit_records=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep -E 'ERROR: permission denied for schema test_schema|ERROR: must be owner of schema test_schema'\")\n\nif [[ -z \"$audit_records\" ]]; then\n  echo \"No audit records found for unsuccessful attempts at the specified access to the specified objects\"\n  exit 1\nelse\n  echo \"Audit records found for unsuccessful attempts at the specified access to the specified objects\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:17:58.158847+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214099",
        "previousName": "",
        "_id": 9051,
        "title": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged. \n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include: \n\nTRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n, or DELETE without a WHERE clause.\n\nUPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a WHERE clause.\n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal. \n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, audit logging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination of these. \n\nNote: That it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214099\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:06.176291+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214100",
        "previousName": "",
        "_id": 9052,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214100\n# Severity: medium\n\n# Check if pgaudit.log contains \"ddl, write, role\"\npgaudit_log_content=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep \"ddl, write, role\")\n\nif [[ -z \"$pgaudit_log_content\" ]]; then\n  echo \"pgaudit.log does not contain 'ddl, write, role'\"\n  exit 1\nelse\n  echo \"pgaudit.log contains 'ddl, write, role'\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:15.213753+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214101",
        "previousName": "",
        "_id": 9053,
        "title": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nCREATE\nSELECT\nINSERT\nUPDATE\nDELETE\nPREPARE\nEXECUTE\nALTER\nDROP",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214101\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:24.397837+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214102",
        "previousName": "",
        "_id": 9054,
        "title": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn an SQL environment, deleting permissions is typically done via the REVOKE command.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214102\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:35.016495+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214103",
        "previousName": "",
        "_id": 9055,
        "title": "For completeness of forensic analysis, it is necessary to track who logs on to PostgreSQL.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create additional log entries specifically for this.)",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214103\n# Severity: medium\n\n# Check if log_connections and log_disconnections are enabled\nlog_connections=$(sudo -u postgres psql -c \"SHOW log_connections\" | grep on)\nlog_disconnections=$(sudo -u postgres psql -c \"SHOW log_disconnections\" | grep on)\n\nif [[ -z \"$log_connections\" || -z \"$log_disconnections\" ]]; then\n  echo \"log_connections or log_disconnections is off\"\n  exit 1\nfi\n\n# Check if log_line_prefix contains sufficient information\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | grep \"%m %u %d %c\")\n\nif [[ -z \"$log_line_prefix\" ]]; then\n  echo \"log_line_prefix does not contain at least %m %u %d %c\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:44.278148+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214104",
        "previousName": "",
        "_id": 9056,
        "title": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214104\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_enabled=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep -c \"pgaudit\")\n\nif [ $pgaudit_enabled -eq 0 ]; then\n    echo \"pgaudit is not enabled\"\n    exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\nauditing_enabled=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -c \"role, read, write, ddl\")\n\nif [ $auditing_enabled -eq 0 ]; then\n    echo \"role, read, write, and ddl auditing are not enabled\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:18:51.723640+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214105",
        "previousName": "",
        "_id": 9057,
        "title": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn an SQL environment, modifying permissions is typically done via the GRANT and REVOKE commands.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214105\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role logging is enabled\nrole_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep role)\n\nif [[ -z \"$role_check\" ]]; then\n  echo \"Role logging is not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:19:05.684453+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214106",
        "previousName": "",
        "_id": 9058,
        "title": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nNote: That it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214106\n# Severity: medium\n\n# Switch to postgres user and create a new role\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob\\\"\"\n\n# Switch to bob role and attempt to execute privileged activity\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; CREATE ROLE stig_test SUPERUSER\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; CREATE ROLE stig_test CREATEDB\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; CREATE ROLE stig_test CREATEROLE\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; CREATE ROLE stig_test CREATEUSER\\\"\"\n\n# Check the latest log for audit records\naudit_records=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep 'ERROR: '\")\n\n# If audit records are not produced, exit with 1\nif [[ -z \"$audit_records\" ]]; then\n  echo \"No audit records found.\"\n  exit 1\nelse\n  echo \"Audit records found.\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:19:17.739287+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214107",
        "previousName": "",
        "_id": 9059,
        "title": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214107\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_log_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_log_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\n# Check if accessing the catalog is audited\nlog_catalog_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log_catalog\" | grep on)\n\nif [[ -z \"$log_catalog_check\" ]]; then\n  echo \"Accessing the catalog is not audited\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:19:26.439320+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214108",
        "previousName": "",
        "_id": 9060,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214108\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\naudit_check=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$audit_check\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:19:40.400009+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214109",
        "previousName": "",
        "_id": 9061,
        "title": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nModifying permissions is done via the GRANT and REVOKE commands.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214109\n# Severity: medium\n\n# Create a role 'bob' and a test table\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT)\\\"\"\n\n# Attempt to modify privileges as bob\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\"\"\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob;\\\"\"\n\n# Check the logs for unsuccessful attempts\nLOG_OUTPUT=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep 'ERROR: permission denied for relation test'\")\n\nif [[ $LOG_OUTPUT == *\"ERROR: permission denied for relation test\"* ]]; then\n  echo \"Audit logs are generated when unsuccessful attempts to modify privileges/permissions occur.\"\n  exit 0\nelse\n  echo \"Audit logs are not generated when unsuccessful attempts to modify privileges/permissions occur.\"\n  exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:19:52.518147+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214110",
        "previousName": "",
        "_id": 9062,
        "title": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn an SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214110\n# Severity: medium\n\n# Create a role 'bob' and a test table\nsudo su - postgres -c \"psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT);\\\"\"\n\n# Set current role to bob and attempt to modify privileges\nsudo su - postgres -c \"psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\"\"\n\n# Check the latest log for the unsuccessful attempt\nlog=$(sudo su - postgres -c \"cat ${PGDATA?}/pg_log/$(ls -t ${PGDATA?}/pg_log/ | head -1) | grep 'ERROR: permission denied for relation test'\")\n\nif [[ -z \"$log\" ]]; then\n  echo \"STIG Finding ID: V-214110 - Audit logs are not generated when unsuccessful attempts to add privileges/permissions occur.\"\n  exit 1\nelse\n  echo \"STIG Finding ID: V-214110 - Audit logs are generated when unsuccessful attempts to add privileges/permissions occur.\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:20:05.455156+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214111",
        "previousName": "",
        "_id": 9063,
        "title": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate\u2019s certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214111\n# Severity: medium\n\n# Check if a CRL file exists\nCRL_FILE=$(sudo -u postgres psql -c \"SHOW ssl_crl_file\" | sed -n 3p | xargs)\n\nif [[ -z \"$CRL_FILE\" ]]; then\n  echo \"No CRL file set in postgresql.conf\"\n  exit 1\nfi\n\n# Check if the CRL file exists\nif [[ ! -f \"$CRL_FILE\" ]]; then\n  echo \"CRL file does not exist\"\n  exit 1\nfi\n\n# Check if hostssl entries in pg_hba.conf have \"cert\" and \"clientcert=1\" enabled\nHOSTSSL_ENTRIES=$(sudo -u postgres grep hostssl ${PGDATA?}/pg_hba.conf)\n\nif [[ ! \"$HOSTSSL_ENTRIES\" =~ \"cert\" ]] || [[ ! \"$HOSTSSL_ENTRIES\" =~ \"clientcert=1\" ]]; then\n  echo \"hostssl entries do not contain cert or clientcert=1\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:20:15.073147+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214112",
        "previousName": "",
        "_id": 9064,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without establishing where events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know where events occurred, such as application components, modules, session identifiers, filenames, host names, and functionality. \n\nAssociating information about where the event occurred within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214112\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed, exiting with code 0\"\n    exit 0\nfi\n\n# Check the current log_line_prefix setting\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | awk 'NR==3')\n\n# Check if log_line_prefix contains %m %u %d %s\nif [[ $log_line_prefix == *\"%m %u %d %s\"* ]]; then\n    echo \"log_line_prefix contains %m %u %d %s\"\n    exit 0\nelse\n    echo \"log_line_prefix does not contain %m %u %d %s\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:20:30.177944+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214113",
        "previousName": "",
        "_id": 9065,
        "title": "Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, PostgreSQL, associated applications, and infrastructure must leverage transmission protection mechanisms.\n\nFor more information on configuring PostgreSQL to use SSL, consult the following documentation:\nhttps://www.postgresql.org/docs/current/ssl-tcp.html\n\nPostgres provides native support for using SSL connections to encrypt client/server communications.  To enable the use of SSL, the postgres \u201cssl\u201d configuration parameter must be set to \u201con\u201d and the database instance needs to be configured to use a valid server certificate and private key installed on the server.  With SSL enabled, connections made to the database server will default to being encrypted.  However, it is possible for clients to override the default and attempt to establish an unencrypted connection. To prevent connections made from non-local hosts from being unencrypted, the postgres host-based authentication settings should be configured to only allow hostssl (i.e., encrypted) connections.  The hostssl connections can be further configured to require that the client present a valid (trusted) SSL certificate for a connection.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214113\n# Severity: medium\n\n# Check if SSL is enabled\nSSL_ENABLED=$(sudo -u postgres psql -c \"SHOW ssl\" | grep 'on')\nif [[ -z \"$SSL_ENABLED\" ]]; then\n  echo \"SSL is not enabled\"\n  exit 1\nfi\n\n# Check if hostssl entries contain clientcert=1\nHOSTSSL_ENTRIES=$(sudo -u postgres grep hostssl ${PGDATA?}/pg_hba.conf | grep 'clientcert=1')\nif [[ -z \"$HOSTSSL_ENTRIES\" ]]; then\n  echo \"hostssl entries do not contain clientcert=1\"\n  exit 1\nfi\n\n# Check if any uncommented lines are not of TYPE \"hostssl\" and do not include the \"clientcert=1\" authentication option\nUNCOMMENTED_LINES=$(sudo -u postgres grep -v '^#' ${PGDATA?}/pg_hba.conf | grep -v 'hostssl' | grep -v 'clientcert=1')\nif [[ -n \"$UNCOMMENTED_LINES\" ]]; then\n  echo \"Uncommented lines are not of TYPE hostssl and do not include the clientcert=1 authentication option\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:20:39.687608+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214114",
        "previousName": "",
        "_id": 9066,
        "title": "Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within PostgreSQL (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which PostgreSQL will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214114\n# Severity: medium\n\n# Check if PostgreSQL is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed\"\n    exit 1\nfi\n\n# Define organization-defined auditable events\nORG_AUDIT_EVENTS=\"LOGIN,LOGOUT,DDL\"\n\n# Check if PostgreSQL is auditing the organization-defined auditable events\nAUDIT_EVENTS=$(sudo -u postgres psql -c \"SHOW rds.log_statement;\" | grep -oP '(?<=rds.log_statement ).*')\n\nif [[ $AUDIT_EVENTS == *\"$ORG_AUDIT_EVENTS\"* ]]; then\n    echo \"PostgreSQL is auditing the organization-defined auditable events\"\n    exit 0\nelse\n    echo \"PostgreSQL is not auditing the organization-defined auditable events\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:20:50.919750+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214115",
        "previousName": "",
        "_id": 9067,
        "title": "Without sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records. \n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time measurements refers to the precision available in time stamp values. Granularity coarser than one second is not sufficient for audit trail purposes. Time stamp values are typically presented with three or more decimal places of seconds; however, the actual granularity may be coarser than the apparent precision. For example, PostgreSQL will always return at least millisecond timestamps but it can be truncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214115\n# Severity: medium\n\n# Check if log_line_prefix contains %m\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | grep '%m')\n\nif [[ -z \"$log_line_prefix\" ]]; then\n  echo \"log_line_prefix does not contain %m\"\n  exit 1\nfi\n\n# Check if time stamps are being logged\nlatest_log=$(ls -Art /var/lib/pgsql/9.6/data/pg_log/ | tail -n 1)\ntime_stamp=$(sudo -u postgres cat /var/lib/pgsql/9.6/data/pg_log/$latest_log | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}')\n\nif [[ -z \"$time_stamp\" ]]; then\n  echo \"Time stamps are not being logged\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:21:01.370339+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214116",
        "previousName": "",
        "_id": 9068,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nIdentifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers.\n\n1) Linux's sudo and su feature enables a user (with sufficient OS privileges) to emulate another user, and it is the identity of the emulated user that is seen by PostgreSQL and logged in the audit trail. Therefore, care must be taken (outside of Postgresql) to restrict sudo/su to the minimum set of users necessary.\n\n2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL privileges) to emulate another user running statements under the permission set of the emulated user. In this case, it is the emulating user's identity, and not that of the emulated user, that gets logged in the audit trail. While this is definitely better than the other way around, ideally, both identities would be recorded.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214116\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check log_line_prefix setting\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | awk 'NR==3')\n\nif [[ $log_line_prefix == *\"%m\"* && $log_line_prefix == *\"%u\"* && $log_line_prefix == *\"%d\"* && $log_line_prefix == *\"%p\"* && $log_line_prefix == *\"%r\"* && $log_line_prefix == *\"%a\"* ]]; then\n    echo \"log_line_prefix setting is correct\"\n    exit 0\nelse\n    echo \"log_line_prefix setting is incorrect\"\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:21:05.615380+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214117",
        "previousName": "",
        "_id": 9069,
        "title": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214117\n# Severity: high\n\nfips_enabled=$(cat /proc/sys/crypto/fips_enabled)\n\nif [ \"$fips_enabled\" -ne 1 ]; then\n    echo \"FIPS is not enabled\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:21:09.766391+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214119",
        "previousName": "",
        "_id": 9070,
        "title": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-3, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214119\n# Severity: high\n\nfips_enabled=$(cat /proc/sys/crypto/fips_enabled)\n\nif [ \"$fips_enabled\" -ne 1 ]; then\n    echo \"FIPS is not enabled\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:21:22.171829+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214120",
        "previousName": "",
        "_id": 9071,
        "title": "This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214120\n# Severity: high\n\n# Check if pgcrypto is installed on PostgreSQL\nPGCRYPTO_CHECK=$(sudo -u postgres psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\" | grep -c pgcrypto)\n\n# Check if disk-level encryption is enabled\nDISK_ENCRYPTION_CHECK=$(lsblk -d -o name,rota,type,mountpoint | grep -c crypt)\n\n# If data in the database requires encryption and pgcrypto is not available, exit with 1\nif [ \"$PGCRYPTO_CHECK\" -eq 0 ]; then\n  echo 'pgcrypto extension is not available'\n  exit 1\nfi\n\n# If disk or filesystem requires encryption and it is not enabled, exit with 1\nif [ \"$DISK_ENCRYPTION_CHECK\" -eq 0 ]; then\n  echo 'Disk-level encryption is not enabled'\n  exit 1\nfi\n\n# If both checks pass, exit with 0\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:21:33.828553+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214121",
        "previousName": "",
        "_id": 9072,
        "title": "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nPostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nPostgreSQL must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214121\n# Severity: medium\n\n# Check if PostgreSQL is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed\"\n    exit 1\nfi\n\n# Check for non-administrative users' ability to create, alter, or replace logic modules\nsudo su - postgres -c \"psql -c '\\dp'\" > /tmp/permissions.txt\nsudo su - postgres -c \"psql -c '\\dn+'\" >> /tmp/permissions.txt\n\n# Check for any permissions that are not documented and approved\nif grep -q -E \"r|w|a|d|D|x|t|X|U|C|c|T|arwdDxt|\\*\" /tmp/permissions.txt; then\n    echo \"Non-administrative users have the ability to create, alter, or replace logic modules\"\n    exit 1\nelse\n    echo \"No non-administrative users have the ability to create, alter, or replace logic modules\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:21:42.885442+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214122",
        "previousName": "",
        "_id": 9073,
        "title": "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is presented on an interface available for users, information on DBMS settings may be inadvertently made available to the user.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214122\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check for non-administrative roles with administrative privileges\nsudo su - postgres -c \"psql -c '\\du'\" | awk 'NR>3 {print $1, $2}' | while read -r role attributes; do\n    if [[ $attributes == *\"Superuser\"* ]] || [[ $attributes == *\"Create role\"* ]] || [[ $attributes == *\"Create DB\"* ]] || [[ $attributes == *\"Bypass RLS\"* ]]; then\n        echo \"Non-administrative role with administrative privileges found: $role\"\n        exit 1\n    fi\ndone\n\n# If no non-administrative roles with administrative privileges are found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:21:53.897631+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214123",
        "previousName": "",
        "_id": 9074,
        "title": "Session auditing is for use when a user's activities are under investigation. To be sure of capturing all activity during those periods when session auditing is in use, it needs to be in operation for the whole time PostgreSQL is running.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214123\n# Severity: medium\n\n# Check if pgaudit is in the current setting\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\n# Check if stderr or syslog are in the current setting\nlog_destination_check=$(sudo -u postgres psql -c \"SHOW log_destination\" | grep -E 'stderr|syslog')\n\n# If pgaudit is not in the current setting, exit with 1\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo 'pgaudit is not in the current setting'\n  exit 1\nfi\n\n# If stderr or syslog are not in the current setting, exit with 1\nif [[ -z \"$log_destination_check\" ]]; then\n  echo 'stderr or syslog are not in the current setting'\n  exit 1\nfi\n\n# If both checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:02.107932+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214124",
        "previousName": "",
        "_id": 9075,
        "title": "PostgreSQLs handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to PostgreSQL or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214124\n# Severity: medium\n\n# Check if pgcrypto is installed on PostgreSQL\nPGCRYPTO_CHECK=$(sudo -u postgres psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\" | grep pgcrypto)\n\n# If pgcrypto is not installed, exit with 1\nif [ -z \"$PGCRYPTO_CHECK\" ]; then\n  echo \"V-214124: pgcrypto is not installed on PostgreSQL\"\n  exit 1\nfi\n\n# If pgcrypto is installed, exit with 0\necho \"V-214124: pgcrypto is installed on PostgreSQL\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:12.489348+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214125",
        "previousName": "",
        "_id": 9076,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without establishing the source of the event, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know where events occurred, such as application components, modules, session identifiers, filenames, host names, and functionality. \n\nIn addition to logging where events occur within the application, the application must also produce audit records that identify the application itself as the source of the event.\n\nAssociating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214125\n# Severity: medium\n\n# Check PostgreSQL settings and existing audit records to verify information specific to the source (origin) of the event is being captured and stored with audit records.\n\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | awk 'NR==3')\nlog_hostname=$(sudo -u postgres psql -c \"SHOW log_hostname\" | awk 'NR==3')\n\nif [[ $log_line_prefix == \"\" ]] || [[ $log_hostname == \"off\" ]]; then\n    echo \"Finding ID: V-214125 - The current settings do not provide enough information regarding the source of the event.\"\n    exit 1\nelse\n    echo \"PostgreSQL settings are correctly configured.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:20.304772+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214126",
        "previousName": "",
        "_id": 9077,
        "title": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\u00a0\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives.\u00a0\u00a0\n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214126\n# Severity: medium\n\n# Check for any unapproved extensions\nunapproved_extensions=$(sudo -u postgres psql -c \"select * from pg_extension where extname != 'plpgsql'\")\n\n# If any unapproved extensions exist, exit with 1\nif [[ $unapproved_extensions ]]; then\n    echo \"Unapproved extensions found: $unapproved_extensions\"\n    exit 1\nelse\n    echo \"No unapproved extensions found.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:29.329933+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214127",
        "previousName": "",
        "_id": 9078,
        "title": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). \n\nIt is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are defined in PostgreSQL but stored in external host files (external procedures). The spawned process used to execute the external procedure may operate within a different OS security context than PostgreSQL and provide unauthorized access to the host system.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214127\n# Severity: medium\n\n# Check for superuser roles\nSUPERUSER_ROLES=$(sudo -u postgres psql -t -c \"\\du\" | grep -i superuser)\nif [[ $SUPERUSER_ROLES ]]; then\n  echo \"Found superuser roles that should not exist\"\n  exit 1\nfi\n\n# Check for unapproved extensions\nUNAPPROVED_EXTENSIONS=$(sudo -u postgres psql -t -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\")\nif [[ $UNAPPROVED_EXTENSIONS ]]; then\n  echo \"Found unapproved extensions\"\n  exit 1\nfi\n\n# If no issues found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:39.061633+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214128",
        "previousName": "",
        "_id": 9079,
        "title": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\u00a0\u00a0\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives.\u00a0\u00a0\n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.\u00a0\n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. The techniques available for disabling components will vary by DBMS product, OS and the nature of the component and may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/role permissions.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214128\n# Severity: medium\n\n# Check for installed postgres packages on RHEL/CENT Systems\nif [ -f /etc/redhat-release ]; then\n    installed_packages=$(yum list installed | grep postgres)\n    if [ -n \"$installed_packages\" ]; then\n        echo \"Unnecessary postgres packages installed: $installed_packages\"\n        exit 1\n    fi\nfi\n\n# Check for installed postgres packages on Debian Systems\nif [ -f /etc/debian_version ]; then\n    installed_packages=$(dpkg --get-selections | grep postgres)\n    if [ -n \"$installed_packages\" ]; then\n        echo \"Unnecessary postgres packages installed: $installed_packages\"\n        exit 1\n    fi\nfi\n\n# If no unnecessary packages found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:48.901214+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214129",
        "previousName": "",
        "_id": 9080,
        "title": "Without the association of security labels to information, there is no basis for PostgreSQL to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be the sepgsql feature of PostgreSQL, a third-party product, or custom application code.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214129\n# Severity: medium\n\n# Assuming the schema name is 'public' and table name is 'users'\nSCHEMA_NAME='public'\nTABLE_NAME='users'\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed. Exiting with code 1.\"\n    exit 1\nfi\n\n# Check if security labels are implemented on the specified table\nSECURITY_LABELS=$(sudo -u postgres psql -c \"\\d+ ${SCHEMA_NAME}.${TABLE_NAME}\" | grep 'Security labels')\n\nif [[ -z \"$SECURITY_LABELS\" ]]; then\n    echo \"Security labeling is not implemented or does not reliably maintain labels on information in process.\"\n    exit 1\nelse\n    echo \"Security labeling is implemented and maintains labels on information in process.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:22:58.110380+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214130",
        "previousName": "",
        "_id": 9081,
        "title": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to PostgreSQL.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214130\n# Severity: high\n\n# Check if password encryption is enabled\npassword_encryption=$(sudo -u postgres psql -c \"SHOW password_encryption\" | grep 'on')\n\nif [[ -z \"$password_encryption\" ]]; then\n  echo \"Password encryption is not enabled\"\n  exit 1\nfi\n\n# Check if any passwords have been stored without being hashed and salted\nplaintext_password=$(sudo -u postgres psql -x -c \"SELECT * FROM pg_shadow\" | grep 'plaintext')\n\nif [[ -n \"$plaintext_password\" ]]; then\n  echo \"Plaintext password found\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:23:11.838493+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214131",
        "previousName": "",
        "_id": 9082,
        "title": "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214131\n# Severity: medium\n\n# Check for SUPERUSER roles\nSUPERUSER_ROLES=$(sudo -u postgres psql -c \"\\du\" | grep SUPERUSER)\nif [[ -n $SUPERUSER_ROLES ]]; then\n  echo \"Found SUPERUSER roles: $SUPERUSER_ROLES\"\n  exit 1\nfi\n\n# Check for update (\"W\") or create (\"C\") privileges on databases\nDB_PRIVILEGES=$(sudo -u postgres psql -c \"\\l\" | grep -E \"W|C\")\nif [[ -n $DB_PRIVILEGES ]]; then\n  echo \"Found update or create privileges on databases: $DB_PRIVILEGES\"\n  exit 1\nfi\n\n# Check for update (\"W\") or create (\"C\") privileges on schemas\nSCHEMA_PRIVILEGES=$(sudo -u postgres psql -c \"\\dn+\" | grep -E \"W|C\")\nif [[ -n $SCHEMA_PRIVILEGES ]]; then\n  echo \"Found update or create privileges on schemas: $SCHEMA_PRIVILEGES\"\n  exit 1\nfi\n\n# If no issues found, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:23:22.334605+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214132",
        "previousName": "",
        "_id": 9083,
        "title": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables, and configuring PostgreSQL' audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to PostgreSQL, even where the application connects to PostgreSQL with a standard, shared account.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214132\n# Severity: medium\n\n# Check log_line_prefix settings\nlog_line_prefix=$(sudo su - postgres -c \"psql -t -c \\\"SHOW log_line_prefix\\\"\")\nif [[ ! $log_line_prefix == *\"< %m %a %u %d %r %p >\"* ]]; then\n  echo \"log_line_prefix setting is incorrect\"\n  exit 1\nfi\n\n# Check shared_preload_libraries settings\nshared_preload_libraries=$(sudo su - postgres -c \"psql -t -c \\\"SHOW shared_preload_libraries\\\"\")\nif [[ ! $shared_preload_libraries == *\"pgaudit\"* ]]; then\n  echo \"shared_preload_libraries setting is incorrect\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:23:32.102954+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214133",
        "previousName": "",
        "_id": 9084,
        "title": "Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to PostgreSQL on its own server will not be an issue. However, space will still be required on PostgreSQL server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214133\n# Severity: medium\n\n# Check if the monitoring tool is installed and running\nif ! pgrep -x \"monitoring_tool\" > /dev/null\nthen\n    echo \"V-214133: No script/tool is monitoring the partition for the PostgreSQL log directories\"\n    exit 1\nfi\n\n# Check if the partition utilization is more than 75%\nif df /var/lib/postgresql/9.x/main/pg_log | awk '{ print $5}' | sed -n 2p | cut -d'%' -f1 - > 75\nthen\n    echo \"V-214133: Storage volume utilization has reached 75%, notify the support staff immediately\"\n    exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:23:44.975918+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214135",
        "previousName": "",
        "_id": 9085,
        "title": "The DoD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user re-authenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categorized information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214135\n# Severity: medium\n\n# Connect to the PostgreSQL database and run the SQL commands\nPGPASSWORD=<password> psql -U <username> -d <database> -h <hostname> -p <port> -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\" > /dev/null 2>&1\nsingle_user_auth=$?\n\nPGPASSWORD=<password> psql -U <username> -d <database> -h <hostname> -p <port> -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\" > /dev/null 2>&1\nall_users_auth=$?\n\n# Check the exit status of the SQL commands\nif [ $single_user_auth -eq 0 ] && [ $all_users_auth -eq 0 ]; then\n    echo 'Re-authentication check passed'\n    exit 0\nelse\n    echo 'Re-authentication check failed'\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:23:59.624684+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214136",
        "previousName": "",
        "_id": 9086,
        "title": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In cases where PostgreSQL-stored private keys are used to authenticate PostgreSQL to the system\u2019s clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks against PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful measures to protect the corresponding private key. Private keys should always be generated and protected in FIPS 140-2 or 140-3 validated cryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of PostgreSQL's private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214136\n# Severity: high\n\n# Switch to postgres user and get the file paths\nssl_ca_file=$(sudo -u postgres psql -c \"SHOW ssl_ca_file\" | sed -n 3p | xargs)\nssl_cert_file=$(sudo -u postgres psql -c \"SHOW ssl_cert_file\" | sed -n 3p | xargs)\nssl_crl_file=$(sudo -u postgres psql -c \"SHOW ssl_crl_file\" | sed -n 3p | xargs)\nssl_key_file=$(sudo -u postgres psql -c \"SHOW ssl_key_file\" | sed -n 3p | xargs)\n\n# Check if the directories are protected\nfor file in $ssl_ca_file $ssl_cert_file $ssl_crl_file $ssl_key_file\ndo\n    dir=$(dirname \"$file\")\n    if [ $(stat -c %a \"$dir\") -ne 700 ]; then\n        echo \"Directory $dir is not protected\"\n        exit 1\n    fi\ndone\n\n# If all directories are protected, exit with 0\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:24:08.384451+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214137",
        "previousName": "",
        "_id": 9087,
        "title": "Only DoD-approved external PKIs have been evaluated to ensure that they have security controls and identity vetting procedures in place which are sufficient for DoD systems to rely on the identity asserted in the certificate. PKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing certificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at http://iase.disa.mil/pki-pke/interoperability.\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214137\n# Severity: medium\n\nssl_ca_file=$(sudo -u postgres psql -c \"SHOW ssl_ca_file\" | grep -v \"ssl_ca_file\" | xargs)\nssl_cert_file=$(sudo -u postgres psql -c \"SHOW ssl_cert_file\" | grep -v \"ssl_cert_file\" | xargs)\n\nif [[ -z \"$ssl_ca_file\" || -z \"$ssl_cert_file\" ]]; then\n    echo \"Database is not configured to use approved certificates\"\n    exit 1\nelse\n    echo \"Database is configured to use approved certificates\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:24:21.306653+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214138",
        "previousName": "",
        "_id": 9088,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without establishing what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214138\n# Severity: medium\n\n# Check log_line_prefix setting\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | awk 'NR==3')\n\n# Check log_connections and log_disconnections settings\nlog_connections=$(sudo -u postgres psql -c \"SHOW log_connections\" | awk 'NR==3')\nlog_disconnections=$(sudo -u postgres psql -c \"SHOW log_disconnections\" | awk 'NR==3')\n\n# Check if log_line_prefix is empty\nif [ -z \"$log_line_prefix\" ]; then\n  echo \"log_line_prefix is not set\"\n  exit 1\nfi\n\n# Check if log_connections and log_disconnections are off\nif [ \"$log_connections\" == \"off\" ] && [ \"$log_disconnections\" == \"off\" ]; then\n  echo \"log_connections and log_disconnections are off\"\n  exit 1\nfi\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:24:32.461350+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214139",
        "previousName": "",
        "_id": 9089,
        "title": "PostgreSQLs handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to PostgreSQL or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214139\n# Severity: medium\n\n# Check if pgcrypto is installed on PostgreSQL\nPGCRYPTO_CHECK=$(sudo -u postgres psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\" | grep pgcrypto)\n\nif [[ -z \"$PGCRYPTO_CHECK\" ]]; then\n  echo \"pgcrypto is not installed on PostgreSQL\"\n  exit 1\nfi\n\n# Check if filesystem and/or disk-level encryption is required and is in use\n# This is a manual check and needs to be verified by the system owner, DBA, and SA\necho \"V-214139: Verify with system owner, DBA, and SA if filesystem and/or disk-level encryption is required and is in use.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:24:51.132320+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214140",
        "previousName": "",
        "_id": 9090,
        "title": "Captured sessions can be reused in \"replay\" attacks. This requirement limits the ability of adversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or process's) session. DBMSs will make access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL must terminate the user session(s) to minimize the potential for sessions to be hijacked.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214140\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check tcp_keepalives_idle\nidle=$(sudo -u postgres psql -c \"SHOW tcp_keepalives_idle;\" | grep -v \"tcp_keepalives_idle\" | xargs)\nif [ -z \"$idle\" ]; then\n    echo \"tcp_keepalives_idle is not set\"\n    exit 1\nfi\n\n# Check tcp_keepalives_interval\ninterval=$(sudo -u postgres psql -c \"SHOW tcp_keepalives_interval;\" | grep -v \"tcp_keepalives_interval\" | xargs)\nif [ -z \"$interval\" ]; then\n    echo \"tcp_keepalives_interval is not set\"\n    exit 1\nfi\n\n# Check tcp_keepalives_count\ncount=$(sudo -u postgres psql -c \"SHOW tcp_keepalives_count;\" | grep -v \"tcp_keepalives_count\" | xargs)\nif [ -z \"$count\" ]; then\n    echo \"tcp_keepalives_count is not set\"\n    exit 1\nfi\n\n# Check statement_timeout\ntimeout=$(sudo -u postgres psql -c \"SHOW statement_timeout;\" | grep -v \"statement_timeout\" | xargs)\nif [ -z \"$timeout\" ]; then\n    echo \"statement_timeout is not set\"\n    exit 1\nfi\n\n# If all checks pass\necho \"All checks passed\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:25:10.304777+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214141",
        "previousName": "",
        "_id": 9091,
        "title": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214141\n# Severity: medium\n\n# Check if pg_log directory is owned by postgres user and group\npg_log_owner=$(ls -ld ${PGDATA?}/pg_log | awk '{print $3\":\"$4}')\nif [ \"$pg_log_owner\" != \"postgres:postgres\" ]; then\n  echo 'pg_log directory is not owned by postgres user and group'\n  exit 1\nfi\n\n# Check if data directory is owned by postgres user and group\ndata_dir_owner=$(ls -ld ${PGDATA?} | awk '{print $3\":\"$4}')\nif [ \"$data_dir_owner\" != \"postgres:postgres\" ]; then\n  echo 'Data directory is not owned by postgres user and group'\n  exit 1\nfi\n\n# Check if pgaudit installation is owned by root\npgaudit_owner=$(ls -ld /usr/pgsql-${PGVER?}/share/contrib/pgaudit | awk '{print $3\":\"$4}')\nif [ \"$pgaudit_owner\" != \"root:root\" ]; then\n  echo 'pgaudit installation is not owned by root'\n  exit 1\nfi\n\n# Check if any role has \"superuser\" that should not\nsuperuser_roles=$(sudo -u postgres psql -tAc \"SELECT rolname FROM pg_roles WHERE rolsuper;\")\nfor role in $superuser_roles\ndo\n  if [ \"$role\" != \"postgres\" ]; then\n    echo \"Role $role should not have superuser privileges\"\n    exit 1\n  fi\ndone\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:25:18.751661+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214142",
        "previousName": "",
        "_id": 9092,
        "title": "Information system auditing capability is critical for accurate forensic analysis. Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when specific actions were performed. This requires the date and time an audit record is referring to. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214142\n# Severity: medium\n\n# Check if postgresql is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"postgresql is not installed\"\n    exit 1\nfi\n\n# Check log_line_prefix\nlog_line_prefix=$(sudo -u postgres psql -c \"SHOW log_line_prefix\" | grep \"%m\")\n\nif [ -z \"$log_line_prefix\" ]\nthen\n    echo \"log_line_prefix does not contain %m\"\n    exit 1\nelse\n    echo \"log_line_prefix contains %m\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:25:32.022402+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214143",
        "previousName": "",
        "_id": 9093,
        "title": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214143\n# Severity: medium\n\n# Check if PGDATA is owned by postgres:postgres and files cannot be accessed by others\nPGDATA_OWNER=$(stat -c '%U:%G' ${PGDATA?})\nif [[ \"$PGDATA_OWNER\" != \"postgres:postgres\" ]] || [[ $(stat -c %a ${PGDATA?}) -gt 750 ]]; then\n  echo 'PGDATA ownership or permission failure'\n  exit 1\nfi\n\n# Check if pgsql shared objects and compiled binaries are owned by root:root\nfor dir in /usr/pgsql-${PGVER?}/bin /usr/pgsql-${PGVER?}/include /usr/pgsql-${PGVER?}/lib /usr/pgsql-${PGVER?}/share; do\n  if [[ $(stat -c '%U:%G' $dir) != \"root:root\" ]]; then\n    echo 'pgsql directory ownership failure'\n    exit 1\n  fi\ndone\n\n# If all checks pass, exit with 0\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:25:46.764642+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214144",
        "previousName": "",
        "_id": 9094,
        "title": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214144\n# Severity: medium\n\n# Check if PostgreSQL uses syslog\nlog_destination=$(sudo -u postgres psql -c \"SHOW log_destination\" | grep syslog)\n\nif [ -z \"$log_destination\" ]; then\n  echo \"V-214144: PostgreSQL does not use syslog\"\n  exit 1\nfi\n\n# Check which log facility is configured\nsyslog_facility=$(sudo -u postgres psql -c \"SHOW syslog_facility\")\n\n# Replace \"facility\" with the correct facility for your organization\nif [ \"$syslog_facility\" != \"facility\" ]; then\n  echo \"V-214144: Wrong syslog facility is configured\"\n  exit 1\nfi\n\n# Check if PostgreSQL has a continuous network connection to the centralized log management system\n# and if PostgreSQL audit records are transferred to the centralized log management system weekly or more often\n# This is a manual check and needs to be replaced with the correct check for your organization\n# echo \"V-214144: Check if PostgreSQL has a continuous network connection to the centralized log management system and if PostgreSQL audit records are transferred to the centralized log management system weekly or more often\"\n# exit 0\n\n# If all checks pass\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:25:52.540107+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214145",
        "previousName": "",
        "_id": 9095,
        "title": "One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid session identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a FIPS 140-2 or 140-3 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement the preferred technique yet may have other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214145\n# Severity: medium\n\n# Check if PostgreSQL is configured to use ssl\nSSL_STATUS=$(sudo -u postgres psql -c \"SHOW ssl\" | grep 'on')\n\nif [ \"$SSL_STATUS\" != \"on\" ]; then\n  echo \"PostgreSQL is not configured to use SSL\"\n  exit 1\nelse\n  echo \"PostgreSQL is configured to use SSL\"\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:26:08.158718+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214146",
        "previousName": "",
        "_id": 9096,
        "title": "To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214146\n# Severity: medium\n\n# Check if PostgreSQL is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed\"\n    exit 1\nfi\n\n# Check if users are uniquely identified and authenticated\nusers=$(sudo -u postgres psql -c \"\\du\" | awk '{print $1}' | tail -n +4 | head -n -2)\nunique_users=$(echo \"$users\" | sort | uniq)\n\nif [ \"$users\" != \"$unique_users\" ]\nthen\n    echo \"Organizational users are not uniquely identified and authenticated\"\n    exit 1\nfi\n\n# Check if every role has unique authentication requirements\nauth_reqs=$(sudo -u postgres cat ${PGDATA?}/pg_hba.conf | grep -v '^#' | awk '{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10}')\nunique_auth_reqs=$(echo \"$auth_reqs\" | sort | uniq)\n\nif [ \"$auth_reqs\" != \"$unique_auth_reqs\" ]\nthen\n    echo \"Every role does not have unique authentication requirements\"\n    exit 1\nfi\n\n# If the script has not exited by now, the check has passed\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:26:17.705359+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214147",
        "previousName": "",
        "_id": 9097,
        "title": "This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214147\n# Severity: medium\n\n# Check if PostgreSQL is installed\nif ! command -v psql &> /dev/null\nthen\n    echo \"PostgreSQL is not installed. Exiting with code 0.\"\n    exit 0\nfi\n\n# Check if PostgreSQL is configured for automatic session termination\nPG_TERMINATION_SETTING=$(psql -U postgres -c \"SHOW idle_in_transaction_session_timeout;\" | grep -o '[0-9]\\+')\n\nif [ -z \"$PG_TERMINATION_SETTING\" ]\nthen\n    echo \"PostgreSQL is not configured for automatic session termination. Exiting with code 1.\"\n    exit 1\nelse\n    echo \"PostgreSQL is configured for automatic session termination. Exiting with code 0.\"\n    exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:26:26.290194+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214148",
        "previousName": "",
        "_id": 9098,
        "title": "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.\n\nA privileged function in PostgreSQL/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these.\n\nHowever, the use of procedural languages within PostgreSQL, such as pl/R and pl/Python, introduce security risk. Any user on the PostgreSQL who is granted access to pl/R or pl/Python is able to run UDFs to escalate privileges and perform unintended functions. Procedural languages such as pl/Perl and pl/Java have \"untrusted\" mode of operation, which do not allow a non-privileged PostgreSQL user to escalate privileges or perform actions as a database administrator.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214148\n# Severity: high\n\n# This script checks if PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without AO authorization.\n\nPG_LANGUAGES=$(psql -U postgres -c \"\\l\")\n\nif [[ $PG_LANGUAGES == *\"pl/python\"* || $PG_LANGUAGES == *\"pl/r\"* ]]; then\n    echo \"PostgreSQL instance uses procedural languages without AO authorization\"\n    exit 1\nelse\n    echo \"PostgreSQL instance does not use procedural languages or has AO authorization\"\n    exit 0\nfi\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:26:38.367253+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214149",
        "previousName": "",
        "_id": 9099,
        "title": "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to PostgreSQL user account for the authenticated identity to be meaningful to PostgreSQL and useful for authorization decisions.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214149\n# Severity: medium\n\n# Check the cn of the certificate\ncn=$(openssl x509 -noout -subject -in client_cert | awk -F'=' '{print $NF}')\n\n# Check if the cn matches any user in PostgreSQL\nuser_exists=$(sudo -u postgres psql -c \"\\du\" | grep -w $cn)\n\n# Check if user name mapping is used\nmap_exists=$(sudo -u postgres grep \"map\" ${PGDATA?}/pg_hba.conf)\n\n# Check user name mappings in pg_ident.conf\nuser_mapping_exists=$(sudo -u postgres cat ${PGDATA?}/pg_ident.conf | grep -w $cn)\n\nif [[ -z \"$user_exists\" && -z \"$map_exists\" && -z \"$user_mapping_exists\" ]]; then\n  echo \"STIG Finding ID: V-214149 - The cn attribute of the certificate does not match the requested database user name and no user mapping is used.\"\n  exit 1\nelse\n  exit 0\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:26:44.101093+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214150",
        "previousName": "",
        "_id": 9100,
        "title": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via shared system resources.\u00a0\u00a0\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\u00a0\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214150\n# Severity: medium\n\necho \"Finding ID: V-214150\"\necho \"STIG Name: postgresql_9.x\"\necho \"Severity: medium\"\necho \"Manual Check: Review the procedures for the refreshing of development/test data from production. Verify that copies of production data are not left in unprotected locations.\"\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:26:52.481894+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214151",
        "previousName": "",
        "_id": 9101,
        "title": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only DBMS processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214151\n# Severity: medium\n\n# Check if the PGDATA environment variable is set\nif [ -z \"$PGDATA\" ]; then\n    echo \"PGDATA environment variable is not set.\"\n    exit 1\nfi\n\n# Check file ownership and permissions\nfind $PGDATA -not -user postgres -exec echo 'File ownership failure' {} \\; -quit -o \\\n    -not -perm -u=rwX -exec echo 'File permission failure' {} \\; -quit\n\nif [ $? -eq 0 ]; then\n    exit 0\nelse\n    exit 1\nfi\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:27:09.117456+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214152",
        "previousName": "",
        "_id": 9102,
        "title": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214152\n# Severity: medium\n\n# Check postgresql.conf file permissions\nPG_CONF_PERMISSIONS=$(stat -c %a ${PGDATA?}/postgresql.conf)\nPG_CONF_OWNER=$(stat -c %U ${PGDATA?}/postgresql.conf)\n\nif [[ \"$PG_CONF_PERMISSIONS\" -ne 600 ]] || [[ \"$PG_CONF_OWNER\" != \"postgres\" ]]; then\n  echo 'postgresql.conf file permissions check failed'\n  exit 1\nfi\n\n# Check log file permissions\nLOG_FILE_MODE=$(sudo -u postgres psql -c \"SHOW log_file_mode\" | awk 'NR==3 {print $1}')\n\nif [[ \"$LOG_FILE_MODE\" != \"600\" ]]; then\n  echo 'Log file permissions check failed'\n  exit 1\nfi\n\n# Check syslog file permissions if PostgreSQL is configured to use syslog\nSYSLOG_CONF=$(sudo -u postgres psql -c \"SHOW syslog_ident\" | awk 'NR==3 {print $1}')\n\nif [[ \"$SYSLOG_CONF\" != \"\" ]]; then\n  SYSLOG_FILE_PERMISSIONS=$(stat -c %a /var/log/syslog)\n  SYSLOG_FILE_OWNER=$(stat -c %U /var/log/syslog)\n\n  if [[ \"$SYSLOG_FILE_PERMISSIONS\" -ne 600 ]] || [[ \"$SYSLOG_FILE_OWNER\" != \"root\" ]]; then\n    echo 'Syslog file permissions check failed'\n    exit 1\n  fi\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:27:13.593018+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214153",
        "previousName": "",
        "_id": 9103,
        "title": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications (including DBMSs) utilizing cryptography are required to use approved NIST FIPS 140-2 or 140-3 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance. \n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.\n\nThe standard for validating cryptographic modules will transition to the NIST FIPS 140-3 publication.\n\nFIPS 140-2 modules can remain active for up to five years after validation or until September 21, 2026, when the FIPS 140-2 validations will be moved to the historical list. Even on the historical list, CMVP supports the purchase and use of these modules for existing systems. While Federal Agencies decide when they move to FIPS 140-3 only modules, purchasers are reminded that for several years there may be a limited selection of FIPS 140-3 modules from which to choose. CMVP recommends purchasers consider all modules that appear on the Validated Modules Search Page:\nhttps://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules\n\nMore information on the FIPS 140-3 transition can be found here: \nhttps://csrc.nist.gov/Projects/fips-140-3-transition-effort/",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214153\n# Severity: high\n\nopenssl_version=$(openssl version)\nif [[ $openssl_version != *\"fips\"* ]]; then\n  echo 'FIPS not included in openssl version'\n  exit 1\nfi\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:27:23.789175+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214154",
        "previousName": "",
        "_id": 9104,
        "title": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214154\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_enabled=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_enabled\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\nauditing_enabled=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [[ -z \"$auditing_enabled\" ]]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:27:35.509383+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214155",
        "previousName": "",
        "_id": 9105,
        "title": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214155\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_enabled=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [ -z \"$pgaudit_enabled\" ]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if role, read, write, and ddl auditing are enabled\nauditing_enabled=$(sudo -u postgres psql -c \"SHOW pgaudit.log\" | grep -E \"role|read|write|ddl\")\n\nif [ -z \"$auditing_enabled\" ]; then\n  echo \"role, read, write, and ddl auditing are not enabled\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:27:48.901839+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214156",
        "previousName": "",
        "_id": 9106,
        "title": "In this context, direct access is any query, command, or call to the DBMS that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and non-standard sources.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214156\n# Severity: medium\n\n# Check if pgaudit is enabled\npgaudit_check=$(sudo -u postgres psql -c \"SHOW shared_preload_libraries\" | grep pgaudit)\n\nif [[ -z \"$pgaudit_check\" ]]; then\n  echo \"pgaudit is not enabled\"\n  exit 1\nfi\n\n# Check if connections are being logged\nlog_connections_check=$(sudo -u postgres psql -c \"SHOW log_connections\" | grep on)\n\nif [[ -z \"$log_connections_check\" ]]; then\n  echo \"Connections are not being logged\"\n  exit 1\nfi\n\n# Check if disconnections are being logged\nlog_disconnections_check=$(sudo -u postgres psql -c \"SHOW log_disconnections\" | grep on)\n\nif [[ -z \"$log_disconnections_check\" ]]; then\n  echo \"Disconnections are not being logged\"\n  exit 1\nfi\n\nexit 0\n\n",
        "severity": "medium"
    },
    {
        "modified": "2023-12-06T02:27:58.946327+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-214157",
        "previousName": "",
        "_id": 9107,
        "title": "PostgreSQL uses OpenSSL for the underlying encryption layer. It must be installed on an operating system that contains a certified FIPS 140-2 or 140-3 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140 OpenSSL libraries.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-214157\n# Severity: high\n\n# Check if the OS is FIPS compliant\nif [[ $(cat /proc/sys/crypto/fips_enabled) -eq 0 ]]; then\n  echo \"FIPS encryption is not enabled\"\n  exit 1\nfi\n\n# Check if PostgreSQL is installed on a CMVP compliant OS\nOS_VERSION=$(uname -r)\nif ! curl -s https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules | grep -q \"$OS_VERSION\"; then\n  echo \"PostgreSQL is not installed on a CMVP compliant OS\"\n  exit 1\nfi\n\n# If both checks pass, exit with 0\nexit 0\n\n",
        "severity": "high"
    },
    {
        "modified": "2023-12-06T02:28:08.814256+00:00",
        "owner": "spigler",
        "name": "postgresql_9.x-V-220321",
        "previousName": "",
        "_id": 9108,
        "title": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of PostgreSQL with the encryption devices.",
        "script": "\n#!/bin/bash\n# STIG Name: postgresql_9.x\n# Finding ID: V-220321\n# Severity: medium\n\n# Check if PostgreSQL is configured to use SSL\nSSL_STATUS=$(sudo -u postgres psql -c \"SHOW ssl\" | grep 'off')\n\n# If SSL is off, this is a finding\nif [[ $SSL_STATUS == 'off' ]]; then\n  echo 'V-220321: PostgreSQL is not using NSA-approved cryptography'\n  exit 1\nfi\n\n# Consult network administration staff to determine whether the server is protected by NSA-approved encrypting devices.\n# This part of the check is manual and cannot be automated.\necho 'V-220321: Please manually verify if the server is protected by NSA-approved encrypting devices.'\nexit 0\n\n",
        "severity": "medium"
    }
]